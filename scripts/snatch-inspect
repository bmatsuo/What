#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use List::Util qw{shuffle};
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Perl6::Form;

# Include private modules.
use What::Subsystem;
use What::Prompt;
use What::Utils;
use What::Format::FLAC;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $subsystem = What::Subsystem->new(
    verbose => 0,
    dry_run => 0,);
my $prompt = What::Prompt->new({
    text => '?',
    is_multiline => 0,});

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{

    my $snatch = $opt{'--snatch'};
    $snatch =~ s!/\z!!xms;

    die "--snatch is not a directory." if !-d $snatch;

    my @files = find_hierarchy($snatch);
    if (@files <= 2) {
        die "Couldn't find any files."
    }

    my @flacs = grep {m/\.flac\z/xms} @files;
    if (!@flacs) {
        die "Couldn't find any FLAC files."
    }

    # This command is MAC OS X ONLY.
    #my @inspect_flacs = ('open', '-W', @flacs);
    #$subsystem->exec(@inspect_flacs) == 0
    #    or die "Couldn't open flac files.";

    my $tags_are_good = check_tags(@flacs);

    my $resp;
    if ($tags_are_good) {
        $prompt->text("Do the tags look good enough?[Y/n]");
        $prompt->validator(
            sub {my $r = shift; $r =~ m/\A(?: [yYnN] | \z )/xms});
        $resp = $prompt->prompt_user();
        $tags_are_good = $resp =~ m/\A(?: y | \z)/ixms;
    }
    else {
        print "Tags were missing. They will have to be fixed.\n";
    }

    $prompt->text("Do you want to look at some spectrals?[Y/n]");
    $resp = $prompt->prompt_user();
    my $should_check_spectrals = $resp =~ m/\A(?: y | \z)/ixms;
    my $spectrals_look_ok = 1;

    if ($should_check_spectrals) {
        # Shuffle the list of flacs.
        my @shuffled_flacs = shuffle (@flacs);
        my $want_more_spectrals = 1;
        my $num_spectrals_viewed = 0;

        # Check some random spectrals.
        while ($want_more_spectrals and @shuffled_flacs) {
            my $flac = shift @shuffled_flacs;

            # Create a spectrogram for $flac.
            my @spek = ('spek', $flac);
            $subsystem->exec(@spek) == 0
                or die "Couldn't make spectrogram for $flac.";
            ++$num_spectrals_viewed;

            # Ask user if the spectrogram looks OK.
            $prompt->text("Is the spectrogram acceptable?[Y/n]");
            $resp = $prompt->prompt_user();
            my $spectral_looks_ok = $resp =~ m/\A(?: y | \z)/ixms;

            $spectrals_look_ok = 0 if !$spectral_looks_ok;

            # TODO: make the min number of spectrals viewed an option.
            if (!$spectrals_look_ok || $num_spectrals_viewed >= 2) {
                # Ask user if the spectrogram looks OK.
                $prompt->text("Do you want another spectrogram?[Y/n]");
                $resp = $prompt->prompt_user();
                $want_more_spectrals = $resp =~ m/\A(?: y | \z)/ixms;
            }
        }

        if (!@shuffled_flacs) { print "All spectrograms viewed.\n"; }
    }

    if (!$spectrals_look_ok) {
        print {\*STDERR} "Bad spectrogram(s) founds.\n";
        # Set exitcode to 2, encoding suspicious spectals; 
        #   and overriding any bad tag error.
        exit(2);
    }
    if (!$tags_are_good){
        print {\*STDERR} "Bad tag(s) found.\n";
        # Set the exitcode to 1, encoding a tag error.
        exit(1);
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

### INTERNAL UTILITY
# Subroutine: check_tags
# Usage: check_tags( @flac_paths )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub check_tags {
    my (@flac_paths) = @_;

    my @flacs = map {read_flac($_)} @flac_paths;

    my @missing = map {[missing_tags($_)]} @flacs;
    my @missing_title;
    my @missing_track_num;
    my @missing_artist;
    my @missing_date;

    my $all_tags_present = 1;

    for my $i (0 ... $#flacs) {
        my $i_missing = $missing[$i];
        for my $m (@{$i_missing}) {
            if ($m eq 'TRACKNUMBER') {
                push @missing_track_num, $flacs[$i];
                $all_tags_present = 0;
            }
            if ($m eq 'ARTIST') {
                push @missing_artist, $flacs[$i];
                $all_tags_present = 0;
            }
            if ($m eq 'TITLE') {
                push @missing_title, $flacs[$i];
                $all_tags_present = 0;
            }
            if ($m eq 'DATE') {
                push @missing_date, $flacs[$i];
                $all_tags_present = 0;
            }
        }
    }

    my $num_missing;
    if (@missing_track_num) {
        $num_missing = scalar @missing_track_num;
        print {\*STDERR} "$num_missing FLAC files missing TRACKNUMBER tags.\n";
    }
    if (@missing_title) {
        $num_missing = scalar @missing_title;
        print {\*STDERR} "$num_missing FLAC files missing TITLE tags.\n";
    }
    if (@missing_artist) {
        $num_missing = scalar @missing_artist;
        print {\*STDERR} "$num_missing FLAC files missing ARTIST tags.\n";
    }
    if (@missing_date) {
        $num_missing = scalar @missing_date;
        print {\*STDERR} "$num_missing FLAC files missing DATE tags.\n";
    }
    if (!defined $num_missing) {
        print {\*STDERR} "No missing tags were found.\n";
    }

    my %vals_of = What::Format::FLAC::tag_sets(@flacs);
    my %varying_vals_of;

    my @tag_val_pairs;
    for my $tag (sort keys %vals_of) {
        my $val;
        if ( all_equal_strings( @{ $vals_of{$tag} } ) ) {
            $val = qq('$vals_of{$tag}->[0]');
            $val = q{} if !defined $val;
            $val =~ s/\n/\\n/gxms;
            $val =~ s/\t/\\t/gxms;
            if (length $val >= 60 ) {
                substr $val, 36, length ($val) - 20 - 1 - 37, q{...};
            }
        }
        else {
            my @defined_vals = grep { defined $_ } @{$vals_of{$tag}};
            my %val_map = map {($_ => 1)} @defined_vals;
            my @unique_vals = keys %val_map;
            #print "Setting VARYING vals for $tag\n";
            $varying_vals_of{$tag} = [@defined_vals] if @defined_vals;
            my $num_defined = scalar @defined_vals;
            my $num_unique = scalar @unique_vals;
            my $num_tracks = scalar (@defined_vals);

            $val = sprintf 
                    "<%d different values%s>",
                    $num_unique, 
                    ($num_defined == $num_tracks ? ""
                        : sprintf (
                            " (%d tracks missing values)", 
                            $num_tracks - $num_defined) );
        }
        push @tag_val_pairs, [$tag, $val];
    }
    print tag_val_form(@tag_val_pairs);

    if ($varying_vals_of{'TITLE'}) {
        $prompt->text("Would you like to inspect track numbers & titles?[Y/n]");
        $prompt->validator(
            sub {my $r = shift; $r =~ m/\A(?: [yYnN] | \z )/xms});
        my $resp = $prompt->prompt_user();
        my $should_show_titles = $resp =~ m/\A(?: y | \z)/ixms;

        if ($should_show_titles) {
            my @nts 
                = map { 
                    [ 
                        ( sprintf "%s-", $vals_of{'DISCNUMBER'}->[$_] || q{})
                            . ($vals_of{'TRACKNUMBER'}->[$_] || "") ,  
                        $vals_of{'TITLE'}->[$_] || "" ] 
                } (0 .. scalar (@{$vals_of{'TITLE'}}) - 1);
            print track_form(@nts);
        }
    }

    return $all_tags_present;
}

### INTERNAL UTILITY
# Subroutine: table_form
# Usage: 
#   table_form(
#       head => \@form_head, 
#       row  => $row_format,
#       foot => \@form_foot, 
#       data => \@row_data, 
#   )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub table_form {
    my ( %arg ) = @_;
    my @form = (
        @{$arg{head}},
        (map {$arg{row}, @{$_}} @{$arg{data}}),
        @{$arg{foot}}
    );
    return form @form;
}

### INTERNAL UTILITY
# Subroutine: tag_val_form
# Usage: tag_val_form( @tag_val_pairs )
# Purpose: Print a two column form with tag names and values.
# Returns: A form (string).
# Throws: Nothing
sub tag_val_form {
    my ( @tag_val_pairs ) = @_;
    #my @alt_head = (
    #    '┌──────────────┬─────────────────────────────────────────────────────────────┐',
    #    '|          TAG | VALUE                                                       |',
    #    '├──────────────┼─────────────────────────────────────────────────────────────┤',
    #);
    #my @alt_foot = (
    #    '└──────────────┴─────────────────────────────────────────────────────────────┘',
    #);
    my @head = (
        '+--------------+---------------------------------------------------------------+',
        '|          TAG | VALUE                                                         |',
        '+--------------+---------------------------------------------------------------+',
    );
    my $row = 
        '| {>>>>>>>>>>} | {<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<} |';
    my @foot = (
        '+--------------+---------------------------------------------------------------+',
    );
    return table_form(
        head => \@head, row => $row, foot => \@foot, 
        data => \@tag_val_pairs);
}
### INTERNAL UTILITY
# Subroutine: track_form
# Usage: track_form( @pos_title_pairs )
# Purpose:
#   Create a form with two columns (track position, track title).
# Returns: A new form (string).
# Throws: Nothing
sub track_form {
    my (@pos_title_pairs) = @_;
    #my @alt_form_head = (
    #    '┌──────┬─────────────────────────────────────────────────────────────────────┐',
    #    '│ POS. │ TITLE                                                               │',
    #    '├──────┼─────────────────────────────────────────────────────────────────────┤',
    #);
    #my @alt_form_foot = ( 
    #    '└──────┴─────────────────────────────────────────────────────────────────────┘',
    #);
    my @head = (
        '+------+-----------------------------------------------------------------------+',
        '│ POS. │ TITLE                                                                 │',
        '+------+-----------------------------------------------------------------------+',
    );
    my $row = 
        '| {>>} | {[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[} |';
    my @foot = (
        '+------+-----------------------------------------------------------------------+',
    );
    return table_form(
        head => \@head, row => $row, foot => \@foot, 
        data => \@pos_title_pairs);
}

### INTERNAL UTILITY
# Subroutine: all_equal_strings
# Usage: all_equal_strings( @strs )
# Purpose: Check if all the strings passed as arguments are equal.
# Returns: True iff all string are equal.
# Throws: Nothing
sub all_equal_strings {
    my @strs = @_;

    return 1 if !@strs;
    my $test_elm = shift @strs;

    for my $elm (@strs) {
        next if $elm eq $test_elm;
        return;
    }

    return 1;
}

### INTERNAL UTILITY
# Subroutine: missing_tags
# Usage: missing_tags( $flac )
# Purpose: Find any tags missing from $flac.
# Returns: A list of all the suggested tags missing from $flac.
# Throws: Nothing
sub missing_tags {
    my ($flac) = @_;

    my @missing;
    my ($track_num, $artist, $title, $date) 
        = map {$flac->tag($_)} qw{TRACKNUMBER ARTIST TITLE DATE};

    if (!defined $track_num || $track_num eq q{}) { 
        push @missing, 'TRACKNUMBER';
    }
    if (!defined $artist || $artist eq q{}) { 
        push @missing, 'ARTIST';
    }
    if (!defined $title || $title eq q{}) { 
        push @missing, 'TITLE'
    }
    if (!defined $date || $date eq q{}) { 
        push @missing, 'DATE'
    }
    return @missing;
}


# Finally, kickstart the script
main();

__END__

=head1 NAME

snatch-inspect
-- Inspect a perfect FLAC snatch for proper tagging and good spectrograms.

=head1 VERSION

Version 0.0_1
Originally created on 09/19/10 09:19:23

=head1 USAGE

snatch-inspect [options]

=head1 REQUIRED ARGUMENTS

=over

=item --snatch [=] <dlpath>

Path to a perfect FLAC (soon other formats will be allowed).

=for Euclid:
    dlpath.type: readable, -d dlpath

=back

=head1 OPTIONS

=over

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Inspects tags and soon hopefully spectros of snatched perfect FLAC 
releases.

This program is currently Mac OS X only due to reliance on 'open' for
openning flacs for tag inspection. Its not clear to me what the best 
way to inspect tags in the terminal is.

The user must set the systems default program to open FLAC files as one
which can properly inspect their tags (for instance, Tag.app for OS X).

This program also requires that 'spek' be installed and visible via the
command
    which spek
Search the forums for more information and spek, and install/compilation
instructions. Mac OS X users have to compile spek from source.

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

© The What team.

