#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use List::Util qw{shuffle};
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::Subsystem;
use What::Prompt;
use What::Utils;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $subsystem = What::Subsystem->new(
        verbose => 0,
        dry_run => 0,);
    my $prompt = What::Prompt->new({
        text => '?',
        is_multiline => 0,});

    my $snatch = $opt{'--snatch'};
    $snatch =~ s!/\z!!xms;

    die "--snatch is not a directory." if !-d $snatch;

    my @files = find_hierarchy($snatch);
    if (@files <= 2) {
        die "Couldn't find any files."
    }

    my @flacs = grep {m/\.flac\z/xms} @files;
    if (!@flacs) {
        die "Couldn't find any FLAC files."
    }

    # This command is MAC OS X ONLY.
    my @inspect_flacs = ('open', '-W', @flacs);
    $subsystem->exec(@inspect_flacs) == 0
        or die "Couldn't open flac files.";

    $prompt->text("Do the tags look good enough?[Y/n]");
    $prompt->validator(
        sub {my $r = shift; $r =~ m/\A(?: [yYnN] | \z )/xms});
    my $resp = $prompt->prompt_user();
    my $tags_are_good = $resp =~ m/\A(?: y | \z)/ixms;

    $prompt->text("Do you want to look at some spectrals?[Y/n]");
    $resp = $prompt->prompt_user();
    my $should_check_spectrals = $resp =~ m/\A(?: y | \z)/ixms;
    my $spectrals_look_ok = 1;

    if ($should_check_spectrals) {
        # Shuffle the list of flacs.
        my @shuffled_flacs = shuffle (@flacs);
        my $want_more_spectrals = 1;
        my $num_spectrals_viewed = 0;

        # Check some random spectrals.
        while ($want_more_spectrals) {
            my $flac = shift @shuffled_flacs;

            # Create a spectrogram for $flac.
            my @spek = ('spek', $flac);
            $subsystem->exec(@spek) == 0
                or die "Couldn't make spectrogram for $flac.";
            ++$num_spectrals_viewed;

            # Ask user if the spectrogram looks OK.
            $prompt->text("Is the spectrogram acceptable?[Y/n]");
            $resp = $prompt->prompt_user();
            my $spectral_looks_ok = $resp =~ m/\A(?: y | \z)/ixms;

            $spectrals_look_ok = 0 if !$spectral_looks_ok;

            # TODO: make the min number of spectrals viewed an option.
            if (!$spectrals_look_ok || $num_spectrals_viewed >= 2) {
                # Ask user if the spectrogram looks OK.
                $prompt->text("Do you want another spectrogram?[Y/n]");
                $resp = $prompt->prompt_user();
                $want_more_spectrals = $resp =~ m/\A(?: y | \z)/ixms;
            }
        }

        if (!@shuffled_flacs) { print "All spectrograms viewed.\n"; }
    }

    if (!$spectrals_look_ok) {
        print {\*STDERR} "Bad spectrogram(s) founds.\n";
        # Set exitcode to 2, encoding suspicious spectals; 
        #   and overriding any bad tag error.
        exit(2);
    }
    if (!$tags_are_good){
        print {\*STDERR} "Bad tag(s) found.\n";
        # Set the exitcode to 1, encoding a tag error.
        exit(1);
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################


# Finally, kickstart the script
main();

__END__

=head1 NAME

snatch-inspect
-- short description

=head1 VERSION

Version 0.0_1
Originally created on 09/19/10 09:19:23

=head1 USAGE

snatch-inspect [options]

=head1 REQUIRED ARGUMENTS

=over

=item --snatch [=] <dlpath>

Path to a perfect FLAC (soon other formats will be allowed).

=for Euclid:
    dlpath.type: readable, -d dlpath

=back

=head1 OPTIONS

=over

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Inspects tags (and soon hopefully spectros) of snatched perfect FLAC 
releases.

This program is currently Mac OS X only due to reliance on 'open' for
openning flacs for tag inspection. Its not clear to me what the best 
way to inspect tags in the terminal is.

The user must set the systems default program to open FLAC files as one
which can properly inspect their tags (for instance, Tag.app for OS X).

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

