#!/usr/bin/env perl
# Use perldoc or option --man to read documentation
###################################################

our $VERSION = "00.00_01";
# Originally created: 12/12/10 18:21:43.

# Include core modules.
use strict;
use warnings;
use File::Basename;
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };

# Include private modules.
use What::WhatRC;
use What::Context;
use What::Subsystem;
use What::Release;
use What::Release::Directory;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $subsystem = What::Subsystem->new(
    verbose => $opt{'--verbose'},
    dry_run => $opt{'--dry-run'},);

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    load_context();
    my $release = release();
    my $rname = $release->short_name();
    my $rdir = scan_rip_dir();

    # Move NFO file.
    my $nfo_path =  $rdir->nfo;
    $rdir->nfo( rename_file(path => $nfo_path, release => $release) )
        if defined $nfo_path;

    # Create an image directory and move images.
    my $subdir_of = sub {
        my $path = dirname($_); 
        prefix(
            string => $path,
            prefix => $rdir->path ,
            replace => q{});
        $path =~ s!\A /!!xms;
        return $path;
    };

    my @images = @{$rdir->images};
    if (@images > 1) {
        my @image_subdirs
            = map { $subdir_of->($_) } @images;
        my @img_in_root_inds
            = grep {$image_subdirs[$_] eq q{}} (0 ... $#image_subdirs);
        if (@img_in_root_inds > 1) {
            my $artwork_dir = sprintf "%s/Artwork", $rdir->path;
            if (!-e $artwork_dir) {
                $subsystem->exec('mkdir', $artwork_dir) == 0
                    or die "Couldn't create artwork directory.";
            }
            elsif (!-d $artwork_dir) {
                die "Why is $artwork_dir a regular file?!";
            }
            # So at this point, the artwork directory will exist.
            for my $img_ind (@img_in_root_inds) {
                my $img = $images[$_];
                my $new_img = sprintf "%s/%s", $artwork_dir, basename($img);

                die "Destination image already exists." if -e $new_img;

                $subsystem->exec('mv', $img, $new_img) == 0
                    or die "Couldn't move $img to $new_img.";

                $images[$img_ind] = $new_img
            }
        }
        $rdir->images([@images]);
    }

    # Move M3U files.
    my @m3us = @{$rdir->m3us};
    for my $m3u_ind (0 ... $#m3us) {
        my $m3u = $m3us[$m3u_ind];
        if ( $rdir->path eq dirname($m3u) ) {
            $m3us[$m3u_ind] = rename_file(
                path => $m3u,
                release => $release,
            );
        }
        else {
            my $rel_dir = dirname($m3u);
            prefix( 
                string => $rel_dir, 
                prefix => sprintf ("%s/", $rdir->path),
                replace => q{},);
            my $suffix = $rel_dir;
            $rel_dir =~ s!/! - !xms;
            $m3us[$m3u_ind] = rename_file(
                path => $m3u,
                release => $release,
                disc => $suffix,
            );
        }
    }
    $rdir->m3us([@m3us]);

    my @discs = @{$rdir->discs};
    for my $disc (@discs) {
        # Move disc M3U files.
        my @m3us = @{$disc->m3us};
        for my $m3u_ind (0 ... $#m3us) {
            my $m3u = $m3us[$m3u_ind];
            $m3us[$m3u_ind] 
                = rename_file(
                    path => $m3u,
                    release => $release,
                    disc => $disc->name);
        }
        # Move CUE files.
        my @cues = @{$disc->cues};
        for my $cue_ind (0 ... $#cues) {
            my $cue = $cues[$cue_ind];
            $cues[$cue_ind] 
                = rename_file(
                    path => $cue,
                    release => $release,
                    disc => $disc->name);
        }
        $disc->cues([@cues]);
        # Move Log files (?).
        my @logs = @{$disc->logs};
        for my $log_ind (0 ... $#logs) {
            my $log = $logs[$log_ind];
            $logs[$log_ind] 
                = rename_file(
                    path => $log,
                    release => $release,
                    disc => $disc->name);
        }
        $disc->logs([@logs]);
    }
    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

### INTERNAL UTILITY
# Subroutine: prefix
# Usage: 
#   prefix( 
#       string  => $str, 
#       prefix  => $pre,
#       replace => $rep,)
# Purpose: 
#   Check if $str has prefix $pre.
#   If so, when $rep exists the prefix in $str is replaced with $rep.
#   When $rep is not defined, or $str does not have prefix $pre,
#   $str is not altered in any way.
# Returns: A boolean value, true iff $str has prefix $pre.
# Throws: Nothing
sub prefix {
    my %arg = @_;
    my ($str, $pre, $rep) = @arg{qw{string prefix replace}};
    my $pre_len = length $pre;
    my $prefix = substr $str, 0, $pre_len;
    if ($prefix eq $pre) {
        if (defined $rep) {
            my $str_ind 
                = grep {$_[$_] && $_[$_] eq 'string'} ( map {2 * $_} (0 ... (@_ / 2 + 1)) );
            #print {\*STDERR} "String index of (@_) is $str_ind.\n";
            die "Couldn't find the string entry of (@_)." if !defined $str_ind;
            substr $_[$str_ind], 0, $pre_len, $rep;
        }
        return 1;
    }
    return 0;
}

### INTERNAL UTILITY
# Subroutine: release_file_name
# Usage: 
#   release_file_name(
#       release => $release,
#       extension => $ext,
#       disc => $disc_name, )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub release_file_name {
    my ( %arg ) = @_;
    my ($release, $dname, $ext) = @arg{qw{release disc extension}};

    die "release_file_name(): extension is not defined" if !defined $ext;
    die "release_file_name(): release is not defined" if !defined $release;

    my $rname = $release->short_name();
    
    my $has_disc = defined ($dname) && !($dname eq q{});
    my $filename 
        = $has_disc ? sprintf ("%s - %s.%s", $rname, $dname, $ext)
        : sprintf ("%s.%s", $rname, $ext);
    return $filename;
}

### INTERNAL UTILITY
# Subroutine: rename_file
# Usage: 
#   rename_file(
#       path => $target_file,
#       release => $release,
#       disc => $disc_name,
#   )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub rename_file {
    my ( %arg ) = @_;
    my ($path, $release, $dname) = @arg{qw{path release disc}};
    my $copy_num;

    die "rename_file(): path is not defined.\n" if !defined $path;
    die "rename_file(): path does not exist.\n" if !-e $path;
    die "rename_file(): path is not readable.\n" if !-r $path;

    die "rename_file(): release is not defined.\n" if !defined $release;

    # Figure out the proper name for the release file.
    my $ext = $path =~ m/\. (\w+) \z/xms ? $1 : q{};
    my $ideal_name = release_file_name (
        release => $release,
        (defined $dname ? (disc => $dname) : ()),
        extension => $ext,
    );
    my $ideal_path = sprintf "%s/%s", dirname($path), $ideal_name;

    # Rename the file if necessary.
    if ( !($ideal_path eq $path) ) {
        my $new_path = $ideal_path;
        while (-e $new_path) {
            if (defined $copy_num) {
                ++$copy_num;
            }
            else {
                $copy_num = 1;
            }
            $new_path = sprintf "%s (%d)", $ideal_path, $copy_num;
        }
        $subsystem->exec('mv', $path, $ideal_path) == 0
            or die "Error moving $path to $ideal_path";
    }

    # Return the end path to the original file.
    return $ideal_path;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-organize
-- Organize the rip directorys contents.

=head1 VERSION

Version 00.00_01

=head1 USAGE

release-organize [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Organize the rip directorys contents.

=head1 BUGS

=over

=back

=head1 AUTHORS

Bryan Matsuo [bryan.matsuo@gmail.com] (primary author)

=head1 COPYRIGHT 

(c) Bryan Matsuo [bryan.matsuo@gmail.com]
