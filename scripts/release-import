#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Temp;
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::WhatRC;
use What::Release;
use What::Subsystem;
use What::Prompt;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $whatrc = read_whatrc('~/.whatrc');
my $info_stub = <<EOSTUB;
# Put a release description here.
# Trailing blank lines and lines beginning with a '#' will be ignored.
# Its recommended that you use whatdg.py to create a release description.
# whatdg.py can be found at 
#   https://ssl.what.cd/forums.php?action=viewthread&threadid=99037
#   or http://what.cd/forums.php?action=viewthread&threadid=99037
EOSTUB

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $snatch = $opt{'--snatch'};
    my $release = What::Release->new(
        artist => $opt{'--artist'},
        title => $opt{'--title'},
        year => $opt{'--year'},);
    my $subsys = What::Subsystem->new(
        verbose => 0,
        dry_run => 0,);
    my $prompt = What::Prompt->new({
        text => "?",
        is_multiline => 1,});

    my $snatch_ok = sub {$_[0] == 0};
    my $snatch_has_bad_tags = sub {$_[0] == 1};
    my $snatch_has_bad_spec = sub {$_[0] == 2};

    my @inspect = ('snatch-inspect', '--snatch', $snatch);
    my $snatch_status = $subsys->exec(@inspect);
    if ($snatch_has_bad_spec->($snatch_status)) {
        die "Halting import: Suspicious spectrals.";
    }

    my @link = ('release-link', '--snatch', $snatch);
    if($snatch_has_bad_tags->($snatch_status)) {
        print {\*STDERR} 
            "Copying release (not linking) so tags can be fixed.\n";
        push @link, '--copy';
    }
    $subsys->exec(@link) == 0 
        or die "Halting import: Couldn't create link release.";


    my $desc_path = do {
        my $desc_temp = File::Temp->new(
            TEMPLATE => '.desc.XXXX', 
            DIR => $whatrc->{rip_dir}, 
            SUFFIX => ".tmp",
            UNLINK => 0,);
        print {$desc_temp} $info_stub;
        $desc_temp->filename;};
    
    my $editor_exitcode 
        = $subsys->exec($whatrc->{editor}, $desc_path);
    if ($editor_exitcode != 0) {
        print {\*STDERR}
            "Editor reported error creating the description. ",
            "Removing temporary files and halting...\n";
        $subsys->exec('rm', $desc_path) == 0
            or die "Failed to remove temporary file $desc_path.";
        print {\*STDERR}
            "Run mkrelease when you have created an Info.txt file.\n";
        exit(1);
    }

    open my $desc_fh, "<", $desc_path
        or die "Can't read from temporary file $desc_path";
    my $desc = do {local $/; <$desc_fh>};
    close $desc_fh;
    $subsys->exec('rm', $desc_path) == 0
        or die "Failed to remove temporary file $desc_path.";

    $desc = join "\n", (grep {$_ !~ m/ \A [#] /xms} split ("\n", $desc));
    $desc =~ s/(?:\s*\n)+\z/\n/xms;
    if ($desc eq q{}) {
        print {\*STDERR} "warning: Info.txt will be empty.\n";
    }

    open my $info, ">", "$whatrc->{rip_dir}/Info.txt"
        or die "Couldn't write to Info.txt";
    print {$info} $desc;
    close $info;

    if (!$snatch_has_bad_tags) {
        my @mkrelease = ('mkrelease', 
            '--artist', $release->{artist},
            '--title', $release->{title},
            '--year', $release->{year},
            (grep {$opt{$_}} qw{--flac --ogg --aac --320 --v0 --v2}),);
        $subsys->exec(@mkrelease) == 0
            or die "Import failed. ",
                "Fix specified problems then try running mkrelease.\n";
    }
    else {
        print {\*STDERR} "Release is in rip dir. But it has bad tags. ",
            "Re-tag it and then run mkrelease.\n"

    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################


# Finally, kickstart the script
main();

__END__

=head1 NAME

release-import
-- Import a snatch into the upload hierarchy.

=head1 VERSION

Version 0.0_1
Originally created on 09/20/10 00:55:49

=head1 USAGE

release-import [options]

=head1 REQUIRED ARGUMENTS

=over

=item --snatch [=] <dlpath>

=for Euclid:
    dlpath.type: readable, -d dlpath

=item --artist [=] <artist>

=item --title [=] <title>

=item --year [=] <year>

=back

=head1 OPTIONS

=over

=item --flac | --FLAC

Create a flac torrent.

=item --ogg | --OGG | --q8

Convert to OGG q8.0 and create a torrent.

=item --aac | --AAC

Convert to AAC and create a torrent.

=item --320

Convert to MP3 CBR 320 and create a torrent.

=item --v0 | --V0

Convert to MP3 VBR V0 and create a torrent.

=item --v2 | --V2

Convert to MP3 VBR V2 and create a torrent.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

