#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Temp;
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::WhatRC;
use What::Release;
use What::Subsystem;
use What::Prompt;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $whatrc = read_whatrc('~/.whatrc');
my $info_stub = <<EOSTUB;
# Put a release description here.
# Trailing blank lines and lines beginning with a '#' will be ignored.
# Its recommended that you use whatdg.py to create a release description.
# whatdg.py can be found at 
#   https://ssl.what.cd/forums.php?action=viewthread&threadid=99037
#   or http://what.cd/forums.php?action=viewthread&threadid=99037
EOSTUB

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $snatch = $opt{'--snatch'};
    my $release = What::Release->new(
        artist => $opt{'--artist'},
        title => $opt{'--title'},
        year => $opt{'--year'},);
    my $subsys = What::Subsystem->new(
        verbose => 0,
        dry_run => 0,);
    my $prompt = What::Prompt->new({
        text => "?",
        is_multiline => 1,});

    my $clean_exit = sub {return $_[0] == 0};
    my $snatch_has_bad_tags 
        = sub {return $_[0]/256 == 1 && $_[0]%256 == 0};
    my $snatch_has_bad_spec 
        = sub {return $_[0]/256 == 2 && $_[0]%256 == 0};

    my @inspect = ('snatch-inspect', '--snatch', $snatch);
    my $snatch_status = $subsys->exec(@inspect);

    my $ok_snatch = $clean_exit->($snatch_status);
    print "Snatch: ", (!$ok_snatch ? "BAD ($snatch_status)" : "OK"), "\n";
    my $bad_tags = $snatch_has_bad_tags->($snatch_status);
    print "Tags: ", ($bad_tags ? "BAD" : "OK"), "\n";
    my $bad_spec = $snatch_has_bad_spec->($snatch_status);
    print "Spectrograms: ", ($bad_spec ? "BAD" : "OK"), "\n";
    if ($bad_spec) {
        die "Halting import: Suspicious spectrals.";
    }
    if (!$ok_snatch && !$bad_tags && !$bad_spec) {
        die "Halting import: Unexpected problem inspecting snatch.\n";
    }

    my @link = ('release-link', '--snatch', $snatch);
    if($bad_tags) {
        print {\*STDERR} 
            "Copying release (not linking) so tags can be fixed.\n";
        push @link, '--copy';
    }
    $subsys->exec(@link) == 0 
        or die "Halting import: Couldn't create link release.";


    my $desc_path = do {
        my $desc_temp = File::Temp->new(
            TEMPLATE => '.desc.XXXX', 
            DIR => $whatrc->{rip_dir}, 
            SUFFIX => ".tmp",
            UNLINK => 0,);
        print {$desc_temp} $info_stub;
        $desc_temp->filename;};
    
    my $editor_exitcode 
        = $subsys->exec($whatrc->{editor}, $desc_path);
    if ($editor_exitcode != 0) {
        print {\*STDERR}
            "Editor reported error creating the description. ",
            "Removing temporary files and halting...\n";
        $subsys->exec('rm', $desc_path) == 0
            or die "Failed to remove temporary file $desc_path.";
        print {\*STDERR}
            "Run mkrelease when you have created an Info.txt file.\n";
        exit(1);
    }

    open my $desc_fh, "<", $desc_path
        or die "Can't read from temporary file $desc_path";
    my $desc = do {local $/; <$desc_fh>};
    close $desc_fh;
    $subsys->exec('rm', $desc_path) == 0
        or die "Failed to remove temporary file $desc_path.";

    $desc = join "\n", (grep {$_ !~ m/ \A [#] /xms} split ("\n", $desc));
    $desc =~ s/(?:\s*\n)+\z/\n/xms;
    if ($desc eq q{}) {
        print {\*STDERR} "warning: Info.txt will be empty.\n";
    }

    open my $info, ">", "$whatrc->{rip_dir}/Info.txt"
        or die "Couldn't write to Info.txt";
    print {$info} $desc;
    close $info;

    if ($ok_snatch) {
        my @mkrelease = ('mkrelease', 
            '--artist', $release->{artist},
            '--title', $release->{title},
            '--year', $release->{year},
            (grep {$opt{$_}} qw{--flac --ogg --aac --320 --v0 --v2}),);
        $subsys->exec(@mkrelease) == 0
            or die "Import failed. ",
                "Fix specified problems then try running mkrelease.\n";
    }
    else {
        print {\*STDERR} "Release is in rip dir.";
        if ($bad_tags) {
            print {\*STDERR} " But it has bad tags.",
                " Re-tag it and then run mkrelease.\n";
        }
        else {
            print {\*STDERR} " But there was a problem...",
                " Fix it if possible and then run mkrelease.\n";
        }
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################


# Finally, kickstart the script
main();

__END__

=head1 NAME

release-import
-- Import a snatch into the upload hierarchy.

=head1 VERSION

Version 0.0_1
Originally created on 09/20/10 00:55:49

=head1 USAGE

release-import [options]

=head1 REQUIRED ARGUMENTS

=over

=item --snatch [=] <dlpath>

=for Euclid:
    dlpath.type: readable, -d dlpath

=item --artist <artist>

Release artist.

=for Euclid:
    artist.type: string, length artist

=item --title <title>

=for Euclid:
    title.type: string, length title

Release title.

=item --year <year>

Release year.

=for Euclid:
    year.type: /\d{4}/

=back

=head1 OPTIONS

=over

=item --flac | --FLAC

Create a flac torrent.

=item --ogg | --OGG | --q8

Convert to OGG q8.0 and create a torrent.

=item --aac | --AAC

Convert to AAC and create a torrent.

=item --320

Convert to MP3 CBR 320 and create a torrent.

=item --v0 | --V0

Convert to MP3 VBR V0 and create a torrent.

=item --v2 | --V2

Convert to MP3 VBR V2 and create a torrent.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

This program attempts to add a recent snatch into the upload hierarchy.
There, it can be transcoded to another format missing from What.CD.
If the tags are bad, you

This program first uses the program snatch-inspect to look at the
snatch specified in the command line arguments.

If the snatch looks perfect (including tags and spectrals) the 
files in the snatch are hard-linked into the release directory
(this saves substantial memory w/ FLAC files). The program
mkrelease is then called to add the release into the upload hierarchy,
convert FLACs and make torrents for any desired formats.

If the tags of the program do not look ok, then the release is copied
into the rip directory so they can be changed manually (**this should
be automated**). Since this is not currently automated, the user
must then call mkrelease to continue the importing process =\

If the spectrograms do not look good (manual verification needed). 
Then the program does nothing with the files.

This programs excepts all the implemented options of snatch-inspect 
and mkrelease.

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

