#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob qw{bsd_glob};
use List::Util qw{first};
use Carp;
my $USER_HAS_THREADS;
if (eval {use threads; 1}) {
    $USER_HAS_THREADS = 1 
}
else{
    eval {use What::ThreadDummy;}
}
use Thread::Queue;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Audio::FLAC::Header;
use MP3::Tag;

use Exception::Class (
    'PrerequisiteError', 
    'BitrateError',
    'SystemCallError' => {alias=>'syserr'},);

# Include private modules.
use What;
use What::Utils qw{:all};
use What::WhatRC;
use What::Release;
use What::Format;
use What::Subsystem;
use What::Context;
use What::Format::FLAC;
use What::Converter::WAVE;
use What::Converter::MP3;
use What::Converter::AAC;
use What::Converter::Ogg;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $subsystem = What::Subsystem->new(
    verbose => $opt{'--verbose'},
    dry_run => $opt{'--dry-run'},);
my $upload_root = whatrc->upload_root;

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    local $| = 1;

    # Load the What context and find the FLAC release directory.
    load_context();
    my $release = release();
    my $directory = eval { $release->directory('FLAC') };
    my $e;
    if ($e = Exception::Class->caught('IOError')) {
        die "Can't open the FLAC directory; $e->error\n";
    }

    # Formulate the list of formats for transcoding to.
    my @desired_formats
        = grep {not $_ eq format_normalized('flac')} (arg_formats(%opt));
    if (!@desired_formats) {
        print {\*STDERR} "No formats to create. Exiting.\n";
        exit 0;
    }
    my $format_filter = sub {
        my $f = shift;
        return 1 if !$release->exists($f);
        print {\*STDERR}
            "Warning: Format $f release already exists... Skipping.\n";
        return 0;
    };
    @desired_formats = grep {$format_filter->($_)} @desired_formats;

    my $should_create_wav = scalar grep {format_needs_wav($_)} @desired_formats;

    # Create directory structures for formats.
    for my $format (@desired_formats) {
        scaffold_format(
            release => $release,
            directory => $directory,
            format => $format);
    }

    # Perform all conversions.
    my $thread_err 
        = process_convs( 
            prep_jobs(
                release => $release,
                directory => $directory,
                wav => $should_create_wav,
                formats => \@desired_formats, ) );
    if ($thread_err) {
        clean_failed_conversions(@desired_formats);
        exit 1;
    }

    # Copy any non-music files in the release.
    copy_rest(
        release => $release,
        directory => $directory,
        formats => \@desired_formats);

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

### INTERNAL UTILITY
# Subroutine: clean_failed_conversions
# Usage: clean_failed_conversions( @formats )
# Purpose: Remove incomplete format releases for which a converter thread died.
# Returns: Nothing
# Throws: Nothing
sub clean_failed_conversions {
    my @formats = @_;
    print {\*STDERR} "Removing partially transcoded releases.\n";

    my @fargs = map {
        file_format_of($_) eq 'MP3' ? "--mp3 $_" : "--$_"
    } @formats;
    my @rm_partials = ('release-delete', @fargs);
    $subsystem->exec(@rm_partials) == 0
        or croak("Couldn't remove partially transcoded releases @formats.");
    return;
}

### INTERNAL UTILITY
# Subroutine: copy_rest
# Usage:
#   copy_rest(
#       release=>$r,
#       directory=>$flac_dir,
#       formats=>\@formats )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub copy_rest {
    my ( %arg ) = @_;
    my ($release, $flac_dir) = @arg{qw{release directory}};
    my @formats = @{$arg{formats}};

    print "Copying accompanying files..." if $opt{'--verbose'};
    for my $dir ($flac_dir->dirs()) {
        my @other_files = $dir->dir_files();
        @other_files 
            = grep {$_ !~ m/\.(?: flac|m3u|cue|log )\z/xms} @other_files;

        # Find an M3U for the directory, and remove for special treatment.
        my @flac_m3us = @{$dir->m3us};
        my $flac_m3u = shift @flac_m3us;
        if (@flac_m3us > 0) {
            print {\*STDERR} 
                "wtf?! multiple M3Us found; $flac_m3u and @flac_m3us\n";
            print {\*STDERR} "skipping @flac_m3us\n";
        }
        if (!defined $flac_m3u && $dir->is_disc) {
            die "No m3u found in FLAC disc directory; $dir->path\n";
        }

        # Copy the other files into the new format directories.
        my $flac_root = $flac_dir->path;
        for my $format (@formats) {
            my $format_ext = format_extension($format);
            my $format_root = $release->format_dir($format);
            my $f_dest
                = $dir->is_root ? $format_root
                : dirname( reroot( $flac_root, $format_root, $dir->path ) );
            if (@other_files > 0) {

                my @cp_others = ('cp', @other_files, $f_dest);
                my $cp_err = $subsystem->exec(@cp_others);
                if ($cp_err) {
                    my @files = map {basename($_)} @other_files;
                    my @err = ("Couldn't copy files to $f_dest", @files);
                    syserr( error => join ("\n", @err, ""), );
                }
            }

            # Write a 'reformated' M3U playlist to the corresponding directory.
            if ($flac_m3u) {
                open my $m3u_in, "<", $flac_m3u
                    or die "Couldn't open playlist $flac_m3u.";
                my $m3u = do {local $/; <$m3u_in>};
                close $m3u_in;

                # Replace '.flac' extensions with the proper extension.
                $m3u =~ s/\.flac ( \r?\n | \z )/\.$format_ext$1/gxms;

                my $format_m3u = reroot($flac_root, $format_root, $flac_m3u);
                open my $m3u_out, ">", $format_m3u
                    or die "Can't write to playlist $format_m3u.";
                print {$m3u_out} $m3u;
                close $m3u_out;
            }
        }
    }
    print "Done\n" if $opt{'--verbose'};
    return;
}

### INTERNAL UTILITY
# Subroutine: process_convs
# Usage:
#   process_convs(
#       queue => $cq,
#       num_convs => $nconv,
#       dependents_of => \%dependents_of,
#       ndependents => \%ndependents )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub process_convs {
    my ( %arg ) = @_;
    my ($cq, $num_conv) = @arg{qw{queue num_convs}};
    my %dependents_of = %{$arg{dependents_of}};
    my %ndependents = %{$arg{ndependents}};

    print sprintf ("%14s", "Converting"), ($opt{'--verbose'} ? '...' : q{});
    my $num_threads = 0;
    my $thread_action = sub {
        ++$num_threads;
        threads->exit() if $USER_HAS_THREADS && !$cq->pending();
        my $conv_job = $cq->dequeue();
        my ($c, $wav) = @{$conv_job};
        my %carg;
        $carg{wav} = $wav if defined $wav;
        my $c_res = eval { $c->convert(%carg) };
        if ($@) {
            print {\*STDERR} "Error converting: $@\n";
            return "FAIL";
        }
        my $out = $c->output_path;

        if (!$opt{'--verbose'}) {
            print '.';
        }
        elsif ($c->flac->tag('discnumber')) {
            print sprintf (
                "[ [%s] %02d-%02d ]",
                $c->format_descriptor,
                $c->flac->tag('discnumber'),
                $c->flac->tag('tracknumber') 
            );
        }
        else {
            print sprintf (
                "[ [%s] %02d ]",
                $c->format_descriptor,
                $c->flac->tag('tracknumber')
            );
        }

        my $now_ok = $dependents_of{$out};
        if (defined $now_ok) {
            my @new_convs = map {[$_, $out]} @{$now_ok};
            $cq->insert(1, @new_convs)
                if @new_convs;
        }

        return [$c, $wav];
    };

    my $max_threads = whatrc->max_threads;
    my $thread_error = 0;
    my $handle_failure = sub {
        my $err = join "\n\t", 
            q{}, "Error detected in conversion thread!",
            "Clearing queue, finishing active jobs, and halting.", q{};
        print {\*STDERR} "$err\n";
        $cq->extract(0, $num_conv);
        $thread_error = 1;
    };

    my $thread_completion_action = sub {
        return if $thread_error;

        if (!defined $_[0] || $_[0] eq 'FAIL') { $handle_failure->(); return; }

        my ($converter, $used_wav) = @{$_[0]};
        if (defined $used_wav) {
            --$ndependents{$used_wav} if $ndependents{$used_wav};
            if ($ndependents{$used_wav} == 0) {
                # Remove the WAVE path.
                if (!$opt{verbose}) {
                    # Print nothing.
                }
                elsif ($converter->flac->tag('discnumber')) {
                    print sprintf (
                        "! RM [WAVE] %02d-%02d !",
                        $converter->flac->tag('discnumber'),
                        $converter->flac->tag('tracknumber') 
                    );
                }
                else {
                    print sprintf (
                        "! RM [WAVE] %02d !",
                        $converter->flac->tag('tracknumber')
                    );
                }
                $subsystem->exec('rm', $used_wav) == 0
                    or syserr( 
                        error => sprintf(
                            "Couldn't remove temporary file %s", basename($used_wav)));
                ;
            }
        }
    };

    my $some_running = sub {
        $USER_HAS_THREADS && threads->list(threads::running) > 0
    };
    my $some_joinable = sub {
        $USER_HAS_THREADS && threads->list(threads::joinable) > 0
    };

    while ( $cq->pending() || $some_running->() || $some_joinable->() ) {
        if (!$USER_HAS_THREADS) {
            $thread_completion_action->($thread_action->());
            next;
        }

        my $thread_buffer_size = scalar threads->list(threads::running);
        if ( $cq->pending() && $thread_buffer_size < $max_threads ) {
            for (0 .. $max_threads - $thread_buffer_size) {
                my $thready = threads->create($thread_action);
            }
        }
        else {
            sleep 1;
        }
        for my $fin_thread (threads->list(threads::joinable)) {
            my $ressy = $fin_thread->join();
            $thread_completion_action->($ressy) if defined $ressy;
        }
    }

    my @remaining_wavs = find_file_pattern('*.wav', '~/.what/work/wav');
    if (@remaining_wavs) {
        print map {sprintf ("! RM [WAVE] %s !", $_)} @remaining_wavs
            if $opt{'--verbose'};

        $subsystem->exec('rm', @remaining_wavs) == 0
            or syserr( error => "Couldn't remove temporary files;\n@remaining_wavs\n");
    }

    print "Done\n";
    return $thread_error;
}

### INTERNAL UTILITY
# Subroutine: prep_jobs
# Usage: 
#   prep_jobs(
#       release => $r,
#       directory => $flac_d,
#       wav => $should_make_mav,
#       formats => \@formats, )
# Purpose: Create all the What::Converter jobs for.
# Returns:
#   A Thread::Queue objects filled with What::Converter::XXXX job objects.
# Throws: Nothing
sub prep_jobs {
    my ( %arg ) = @_;
    my ($r, $flac_d, $should_make_wav) = @arg{qw{release directory wav}};
    my @formats = @{$arg{formats}};
    my @flac_files = $flac_d->audio_files();
    my %tracknum_of = (map {($_ => basename($_) =~ /^(\d+)/ ? $1 : 0)} @flac_files);
    @flac_files = sort { $tracknum_of{$a} <=> $tracknum_of{$b} } @flac_files;

    my $cq = Thread::Queue->new();
    my $nconv = 0;
    my %dependents_of;
    my %ndependent;

    my $print_status = sub {
        # Print progress indicator
        print $opt{'--verbose'} ? q{ }.$_[0]->format_descriptor : '.';
    };

    print sprintf ("%14s", "Preparing jobs"), ($opt{'--verbose'} ? '...' : q{});
    my $cid = 0;
    my $temp_wav_dest_dir = What::temp_wav_dir();
    # Convert each flac file into all desired formats.
    for my $flac_path ( @flac_files) {
        my $flac_obj = read_flac($flac_path);

        # Create a name for reencoded MP3 files.
        my $flac = basename($flac_path);

        printf "[ %02d %s:", (map {$flac_obj->tag($_)} qw{TRACKNUMBER TITLE})
            if $opt{'--verbose'};

        my $wav_path;
        if ($should_make_wav) {
            my $new_wav_c = What::Converter::WAVE->new(
                flac => $flac_obj,
                dest_dir => $temp_wav_dest_dir,
                append_id => 1,
                id => $cid++,
            );

            $print_status->($new_wav_c);

            $cq->enqueue([$new_wav_c,]);
            ++$nconv;

            $wav_path = $new_wav_c->output_path;
            $dependents_of{$wav_path} = [];
            $ndependent{$wav_path} = 0;
        }

        # Convert the decoded WAVE into all desired formats.
        for my $f (@formats) {
            my $format_root = $r->format_dir($f);
            my $dest_dir 
                = dirname( reroot($flac_d->path, $format_root, $flac_path) );
            my $file_format = file_format_of($f);

            # Select the converter to use.
            my $conv 
                = $file_format eq 'MP3'
                    ?  What::Converter::MP3->new(bitrate => $f, id => $cid++)
                : $file_format eq 'OGG'
                    ?  What::Converter::Ogg->new(id => $cid++)
                : $file_format eq 'AAC'
                    ?  What::Converter::AAC->new(id => $cid++)
                : undef;

            croak("Didn't recognize format $f.") if !defined $conv;

            $print_status->($conv);
            ++$nconv;
            $conv->flac($flac_obj);
            $conv->dest_dir($dest_dir);
            if ( $conv->needs_wav() ) {
                push @{$dependents_of{$wav_path}}, $conv;
                ++$ndependent{$wav_path};
            }
            else {
                $cq->enqueue([$conv,]);
            }
        }

        print ' ]' if $opt{'--verbose'};
    }
    print "Done\n";

    return (
        queue => $cq,
        dependents_of => \%dependents_of,
        ndependents => \%ndependent,
        num_convs => $nconv);
}

### INTERNAL UTILITY
# Subroutine: scaffold_format
# Usage:
#   scaffold_format(
#       release   => $r,
#       directory => $flac_dir,
#       format => $new_format )
# Purpose: 
# Returns: Nothing
# Throws: Nothing
sub scaffold_format {
    my %arg = @_;
    my ($release, $flac_dir, $format) = @arg{qw{release directory format}};
    $format = format_normalized($format);
    print "Creating $format directory..." if $opt{'--verbose'};
    my $format_path = $release->format_dir($format);
    if (!-d $format_path) {
        $subsystem->exec('mkdir', $format_path) == 0
            or syserr(error=> "Couldn't create directory $format_path");
    }
    print "Done\n" if $opt{'--verbose'};

    my @dirs = $flac_dir->dirs();
    if (scalar (@dirs) > 1) {
        print "\nCreating internal directories for $format..." if $opt{'--verbose'};

        for my $d (@dirs) {
            my $format_d = reroot($flac_dir->path, $format_path, $d->path);
            if (!-d $format_d) {
                $subsystem->exec('mkdir', $format_d) == 0
                    or syserr(error => "Couldn't create disc directory $format_d");
            }
            else {
                print {\*STDERR} "$format_d exists.\n"
            }
        }

        print "Done\n" if $opt{'--verbose'};
    }

    return $format_path;
}

# Subroutine: wav_output($flac_file, $wav_dest_dir)
# Type: INTERFACE SUB
# Purpose: 
#   Compute the decoded output file for a given FLAC file.
# Returns: 
#   Path to the decoded WAVE file.
sub wav_output {
    my ($flac, $wav_dir) = @_;
    my $wav_name = basename($flac);
    $wav_name =~ s/ \.flac \z/.wav/xms;
    my $wav_path = "$wav_dir/$wav_name";
    return $wav_path;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

convert-flac-release
-- Convert a FLAC release to a number of other formats.

=head1 VERSION

Version 0.0_1
Originally created on 07/15/10 01:42:25

=head1 USAGE

convert-flac-release [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --v0 | --V0

Convert FLAC release to an MP3 V0 VBR release.

=item --v2 | --V2

Convert FLAC release to an MP3 V2 VBR release.

=item --320

Convert FLAC release to an MP3 320kbps CBR release.

=item --ogg | --OGG | --q8

Convert FLAC release to an OGG -q8.0 VBR release.

=item --aac | --AAC

Convert FLAC release to an AAC ~256kbps ABR release.

=item --all

Produce releases in all What.CD allowed formats and bitrates (not recommended).

=item --mp3 <quality> | --MP3 <quality>

Specify creation of CBR bitrate or VBR quality release. 
<quality> can be any of the following:

    32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320

or 

    V1, V2, V3, V4, V5, V6, V7, V8, V9

=for Euclid:
    repeatable
    quality.type: string, quality =~ m/[vV][0-9]|32|40|48|56|64|80|96|112|128|160|192|224|256|320/

=item --force-flac | -f

Force flac to overwrite any existing WAVE files.

=item --dry-run

Do not actually run any programs. Just print out commands.

=item --verbose

Print out commands prior to execution.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Transcode the context FLAC release to create releases of other formats.
This creates new format release directories in the upload hierarchy.

After running this program, run release-mktorrent to create torrents for
produced format releases. Torrent creation is not automatic when running
release-flac-convert by itself.

This program is capable of making MP3 releases of qualities which have
bitrate too low to be accepted on What.CD. These releases can be used for
adding to your music library. See `perldoc release-add-to-library` for 
more information.

=head1 IMPORTANT WHATRC VARIABLES

upload_root
max_threads

=head1 BUGS

=over

Known to not properly transfer foreign language characters in MP3 tags.

=back

=head1 COPYRIGHT & LICENSE

© The What team.

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
