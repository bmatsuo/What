#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob qw{:glob};
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Audio::FLAC::Header;
use Readonly;

use Exception::Class (
    'PrerequisiteError', 
    'SystemCallError' => {alias=>'syserr'},);

# Include private modules.
use What::WhatRC;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $artist = $opt{'--artist'};
    my $title = $opt{'--title'};
    my $year = $opt{'--year'};
    my %release_info
        = (artist => $artist, title => $title, year => $year);

    my @desired_formats 
        = map {$opt{"--$_"} ? $_ : () } 
            qw{v0 v2 320};

    my %converted_to;
    for my $format (@desired_formats) { $converted_to{$format} = {} }
    my %dest_for;

    my $whatrc = read_whatrc("$ENV{'HOME'}/.whatrc");

    my $release_root_name = release_root_name(%release_info);

    my $release_path = "$whatrc->{'rip_dir'}/$artist/$release_root_name";

    PrerequisiteError->throw(
        error=>"Release root does not exist; $release_path")
            if (!-d $release_path or !-w $release_path);
    
    $release_path =~ s/\A ~/$ENV{'HOME'}/xms;

    my $flac_dir_name
            = release_root_name(
                %release_info,
                audio_format => 'flac');

    my $flac_source_dir = "$release_path/$flac_dir_name";

    my %flac_info = flac_files_in($flac_source_dir);

    for my $format (@desired_formats) {
        my $format_dir_name 
            = release_root_name(
                %release_info,
                audio_format => $format);
        my $format_dest_dir = "$release_path/$format_dir_name";
        if (!-d $format_dest_dir) {
            print "Creating directory $format_dest_dir\n";

            subsystem ('mkdir', $format_dest_dir) == 0
                or syserr(
                    error=>
                        "Couldn't create directory $format_dest_dir\n$?");
        }
        $dest_for{$format} = $format_dest_dir;
    }

    my $temp_wav_dest_dir = $flac_source_dir;
    
    # Convert each flac file into all desired formats.
    for my $flac_path (keys %flac_info) {
        # Create temporary file for WAVE output.
        my $wav_path = wav_output($flac_path, $temp_wav_dest_dir);

        # Create a name for reencoded MP3 files.
        my $flac = basename($flac_path);
        my $mp3 = $flac;
        $mp3 =~ s/ \.flac \z/.mp3/xms;

        # Create the call to the flac command.
        my @flac_cmd = flac_command($flac_path, $temp_wav_dest_dir);

        print "Converting $flac...";

        # Attempt to execute the flac command.
        subsystem(@flac_cmd) == 0
            or syserr(
                error=>"Couldn't convert $flac_path to $wav_path\n$?");

        print "WAVE...";

        # Convert the decoded WAVE into all desired MP3 formats.
        for my $format (@desired_formats) {
            my $uc_format = uc $format;
            my $mp3_dest = "$dest_for{$format}/$mp3";
            my @lame_cmd = lame_command(
                wav => $wav_path,
                mp3 => $mp3_dest,
                bitrate => $format,
                flac_info => $flac_info{$flac_path},);
            # Execute lame command.
            subsystem(@lame_cmd) == 0
                or syserr(
                    error=>
                        "Couldn't convert $flac_path to $mp3_dest\n$?");
            print "$uc_format...";
        }

        print "DONE\n",
            "Removing WAVE...";

        # Remove the WAVE path.
        subsystem('rm', $wav_path) == 0
            or syserr(
                error=>"Couldn't remove temporary file $wav_path\n$?");

        print "DONE\n";
    }

    my @other_files = other_files_in($flac_source_dir);

    print "Copying accompanying files...";

    print "\n@other_files\n" if $opt{'--verbose'};

    if (@other_files) {
        for my $format (keys %dest_for) {
            my $format_dest_dir = $dest_for{$format};
            my @cp_others_cmd 
                = ('cp', @other_files, $format_dest_dir);
            subsystem(@cp_others_cmd) == 0
                or syserr(
                    error=>
                        join ("\n",
                            "Couldn't copy other files",
                            map {basename($_)} @other_files,""));
        }
    }

    print "DONE\n";

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

# Subroutine: subsystem(@cmd)
# Type: INTERFACE SUB
# Purpose: 
#   Print the command if either --dry-run or --verbose is specied.
#   Run a system command, only if --dry-run is not specified.
# Returns: 
#   The exit code of the system command.
sub subsystem {
    print "@_\n"
        if $opt{'--dry-run'} or $opt{'--verbose'};
    return system @_
        if not defined $opt{'--dry-run'};
    return 0;
}

# Subroutine: flac_options($flac_file, $wav_dest)
# Type: INTERNAL UTILITY
# Purpose: 
#   Create a set of options for use with the flac program.
# Returns: 
#   A list of options.
sub flac_options {
    my ($flac_file, $wav_dest_dir) = @_;
    my @opts = (
        '--decode', 
        '--silent',
        #"--output-prefix='$wav_dest_dir'",
        );
    push @opts, '-f' if $opt{'--force-flac'};
    return @opts;
}

# Subroutine: flac_command($flac_file, $wav_dest_dir);
# Type: INTERFACE SUB
# Purpose: 
# Returns: 
sub flac_command {
    my ($flac_file, $wav_dest_dir) = @_;

    my @options = flac_options($flac_file, $wav_dest_dir);

    my @cmd = ('flac', @options, $flac_file);

    return @cmd;
}

# Subroutine: wav_output($flac_file, $wav_dest_dir)
# Type: INTERFACE SUB
# Purpose: 
#   Compute the decoded output file for a given FLAC file.
# Returns: 
#   Path to the decoded WAVE file.
sub wav_output {
    my ($flac, $wav_dir) = @_;
    my $wav_name = basename($flac);
    $wav_name =~ s/ \.flac \z/.wav/xms;
    my $wav_path = "$wav_dir/$wav_name";
    return $wav_path;
}

# Subroutine: lame_bitrate_options($bitrate)
# Type: INTERNAL UTILITY
# Purpose: 
#   Determine a list of options for converting to a certain bitrate.
# Returns: 
#   The list of options.
sub lame_bitrate_options {
    my $bitrate = uc shift;
    my @options;

    if ($bitrate eq 'V0') {
        @options = qw{-V0 --vbr-new};
    }
    elsif ($bitrate eq 'V2') {
        @options = qw{-V2 --vbr-new};
    }
    elsif ($bitrate eq '320') {
        @options = qw{--cbr -b320 -h};
    }

    return @options;
}

# Subroutine: lame_general_tag_options()
# Type: INTERNAL UTILITY
# Purpose: Return general options for lame (always used).
# Returns: A list of options.
sub lame_general_tag_options {
    return qw{--add-id3v2 --ignore-tag-errors};
}

# Subroutine: lame_tag_options($flac_info)
# Type: INTERNAL UTILITY
# Purpose: 
#   Determine the proper tag options for lame given an
#   Audio::FLAC::Header object, $flac_info.
# Returns: 
#   A list of options.
sub lame_tag_options {
    my $flac_info = shift;

    my %flac_tag = %{$flac_info->{tags}};

    my @options = lame_general_tag_options;

    my %tag_option = (
        ALBUM => '--tl',
        ARTIST=> '--ta',
        TITLE => '--tt',
        DATE => '--ty',
        GENRE => '--tg',
        TRACKNUMBER => '--tn',
        COMMENT => '--tc',
    );

    for my $tag (keys %flac_tag) {
        if (defined $tag_option{$tag}) {
            my @lame_opts_for_tag = ($tag_option{$tag}, $flac_tag{$tag});
            my $opts_end = scalar @options;
            push @options, @lame_opts_for_tag;
            next;
        }
        # TODO: Handle these tags seperately
        #else {
        #    warn "Tag $tag couldn't be found among the aptions"
        #}
    }

    return @options;
}

# Subroutine: lame_options(
#   wav => $wav_path, 
#   mp3 => $mp3_path, 
#   bitrate => $bitrate, 
#   flac_info => $flac_info);
# Type: INTERNAL UTILITY
# Purpose: 
#   Create options for the command 'lame'.
# Returns: 
#   A list of options.
sub lame_options {
    my %arg = @_;
    my @bitrate_opts = lame_bitrate_options($arg{bitrate});
    my @general_opts = qw{--quiet --nohist};
    my @tag_opts = lame_tag_options($arg{flac_info});
    my @lame_opts = (@bitrate_opts, @general_opts, @tag_opts);
    return @lame_opts;
}

# Subroutine: lame_command(
#   wav => $wav_path,
#   mp3 => $mp3_path,
#   bitrate => $bitrate,
#   flac_info => flac_info)
# Type: INTERFACE SUB
# Purpose: 
#   Construct the 'lame' command for converting a wav file into an MP3,
#   while preserving the tags of the original FLAC file.
# Returns: 
#   A 'lame' system command as a list.
sub lame_command {
    # TODO: argument checking.
    my %arg = @_;
    my @options = lame_options(%arg);
    my @cmd = ('lame', @options, $arg{wav}, $arg{mp3});
    return @cmd;
}

# Subroutine: 
#   release_root_name(
#       artist  => $artist,
#       title   => $title,
#       year    => $year,
#       audio_format    => $audio_format,)
# Type: INTERFACE SUB
# Purpose: 
#   Form release information into a director name.
# Returns: 
#   The release directory name.
sub release_root_name {
    my %info = @_;
    my ($artist, $title, $year,$audio_format) 
        = ($info{artist}, $info{title}, $info{year}, $info{audio_format});

    croak("Artist is not defined.") if (!defined $artist);
    croak("Title is not defined.") if (!defined $title);

    my $dir_name = join q{ - }, $artist, ($year or ()), $title;

    $dir_name .= join q{}, q{ [},uc $audio_format,q{]}
        if defined $audio_format;

    return $dir_name;
}

# Subroutine: other_files_in($flac_dir)
# Type: INTERFACE SUB
# Purpose: Find non-FLAC files in a given directory.
# Returns: 
#   HASH keyed by file paths.
sub other_files_in {
    my $flac_dir = shift;

    # Escape special characters for bsd_glob (space is not special).
    $flac_dir =~ s/( \[ | \] | [{}()*?] )/\\$1/gxms;

    my @files = bsd_glob("$flac_dir/*");

    my @other_files;

    for my $file (@files) {
        push @other_files, $file 
            if $file !~ / \.flac \z/xms;
    }

    return @other_files;
}

# Subroutine: flac_files_in($flac_dir)
# Type: INTERFACE SUB
# Purpose: 
#   Find FLAC files in a given directory.
# Returns: 
#   Return a hash of keyed by FLAC files in directory $dir.
#   The values of the hash will be Audio::FLAC::Header objects.
sub flac_files_in {
    my $flac_dir = shift;

    # Escape special characters for bsd_glob (space is not special).
    $flac_dir =~ s/( \[ | \] | [{}()*?] )/\\$1/gxms;

    my @flac_files = bsd_glob("$flac_dir/*.flac");

    my %flac_info;

    for my $flac (@flac_files) {
        $flac_info{$flac} = Audio::FLAC::Header->new($flac);
    }

    return %flac_info;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

convert-flac-release
-- short description

=head1 VERSION

Version 0.0_1
Originally created on 07/15/10 01:42:25

=head1 USAGE

convert-flac-release [options]

=head1 REQUIRED ARGUMENTS

=over

=item --artist [=] <artist>

Release artist.

=item --title [=] <title>

Release title.

=item --year [=] <year>

Release year.
    
=back

=head1 OPTIONS

=over

=item --v0 | --V0

Produce an MP3 release set with quality setting -v0.

=item --v2 | --V2

Produce an MP3 release set with quality setting -v2.

=item --320 | --cbr

Produce an MP3 release set with a constant bitrate of 320kbps.

=item --all

Produce all possible bitrates of MP3 files.

=item --force-flac | -f

Force flac to overwrite any existing WAVE files.

=item --dry-run

Do not actually run any programs. Just print out commands.

=item --verbose

Print out commands prior to execution.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Convert FLAC files comprising an entire music release.

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

©Bryan Matsuo (bryan.matsuo@gmail.com)

