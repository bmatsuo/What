#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob 'bsd_glob';
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::Release;
use What::WhatRC;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $illegal_chars = qr{([/?:])}xms;

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $whatrc = read_whatrc("~/.whatrc");

    my $rip_dir = $whatrc->{rip_dir};

    $rip_dir =~ s/(\[ | \] | [{}*?])/\\$1/xms;

    if (!-d $rip_dir) {
        print {\*STDERR} "Can't find rip directory $rip_dir.\n";
    }

    my @release_files = bsd_glob("$rip_dir/*");

    my @flac_files;
    my @images;
    my $log_file;
    my $cue_file;
    my $info_file;

    my @hidden_files = map {basename($_)} bsd_glob("$rip_dir/.*");

    shift @hidden_files; shift @hidden_files;

    if (scalar @hidden_files) {
        print {\*STDERR} "Hidden files found; @hidden_files\n";
        $exitcode = 1;
    }

    for my $file (@release_files) {

        my $name = basename($file);

        if ($name =~ $illegal_chars) {
            print {\*STDERR} 
                "Illegal character $1 in filename '$name'.\n";
            $exitcode = 1;
        }

        if ($name =~ m/\A \. .+ \z/xms) {
            print {\*STDERR}
                "Hidden file found that should't be in torrent; $name\n";
            $exitcode = 1;
        }

        # Extract the file's extension
        my $ext = $file =~ m/ \. ([^.]+) \z/xms ? lc $1 : "";

        if ($ext eq 'flac') { push @flac_files, $file }
        elsif ($ext eq 'tiff') { push @images, $file }
        elsif ($ext eq 'log') { $log_file = $file }
        elsif ($ext eq 'cue') { $cue_file = $file }
        elsif (basename($file) eq "Info.txt") { $info_file = $file }
        elsif ($ext eq '') {
            print {\*STDERR} 
                "warning: File with no extension $file found.\n";
        }
        else {
            print {\*STDERR} 
                "warning: File with unexpected type $ext found; $file\n";
        }
    }

    if (!@flac_files) {
        print {\*STDERR} "No FLAC files found in FLAC directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} scalar(@flac_files)." FLAC files found.\n";
    }

    if (!@images){
        print {\*STDERR} "No TIFF images found in FLAC directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} scalar(@images)." TIFF images found.\n";
    }

    if (!defined $log_file) {
        print {\*STDERR}
            "No log file found in flac directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "Log file found.\n";
    }

    if (!defined $info_file) {
        print {\*STDERR}
            "No info file found in flac directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "Info.txt found.\n";
    }

    if (!defined $cue_file) {
        print {\*STDERR}
            "No CUE file found in flac directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "CUE file found.\n";
    }

    if ($opt{'--verbose'}) {
        if (!$exitcode) {
            print {\*STDERR}
                "Release is ready to be moved and converted to MP3.\n";
        }
        else {
            print {\*STDERR} 
                "Release is NOT ready to be moved and converted.\n";
        }
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

# Subroutine: release_dir_is_complete($dir)
# Type: INTERFACE SUB
# Purpose: Check that all desired files are in a release directory.
# Returns: 
sub release_dir_is_complete {
    return;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-ok
-- short description

=head1 VERSION

Version 0.0_1
Originally created on 07/18/10 23:19:19

=head1 USAGE

release-ok [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --verbose

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Check that a flac release directory contains everything that it should.

TODO:

Check the flac for 100%

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

