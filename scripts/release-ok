#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob 'bsd_glob';
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };

# Include private modules.
use What::Release;
use What::WhatRC;
use What::Utils;
use What::Release::Directory;
use What::Prompt::YesNo;
use What::Subsystem;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $illegal_chars = qr{([/?:])}xms;
my $subsys = What::Subsystem->new(
    verbose => $opt{'--verbose'},
    dry_run => $opt{'--dry-run'},
);

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $rip_dir = whatrc->rip_dir;

    if (!-d $rip_dir) {
        print {\*STDERR} "Can't find rip directory $rip_dir.\n";
    }

    my $rip = scan_rip_dir();
    if ( !(uc $rip->file_format eq 'FLAC') ) {
        print {\*STDERR} "Rip directory contents are not FLAC.\n";
        $exitcode = 1;
    }
    else {
        if ($opt{'--verbose'}) {
            my $num_discs = scalar @{$rip->discs};
            my $num_songs = 0;
            for my $disc (@{$rip->discs}) {
                $num_songs += scalar @{$disc->songs};
            }
            print {\*STDERR} sprintf (
                    "%d FLAC files found across %d discs.\n",
                    $num_songs, $num_discs);
        }
    }

    my @all_files = find_hierarchy($rip_dir, 1);
    my @directories = grep {-d $_} @all_files;

    my @images = $rip->all_images();
    if (!@images){
        print {\*STDERR} "No images found.\n";
        $exitcode = 1;
    }
    if ($opt{'--verbose'}) {
        print {\*STDERR} sprintf "%d image(s) found.\n", scalar @images;
    }

    # Handles for finding discs missing files.
    my %good_disc;
    my @bad_discs;

    for my $disc ($rip->discs()) {
        if (!$disc->has_log()) {
            if (!$opt{'--no-log'}) {
                my $disc_log_err 
                    = $disc->name eq q{} ? "Release has no log file.\n"
                    : sprintf "Disc %s has no log file", $disc->name;
                print {\*STDERR} $disc_log_err;
                $exitcode = 1;
            }
        }
        if (!$disc->has_cue()) {
            if (!$opt{'--no-cue'}) {
                my $disc_cue_err 
                    = $disc->name eq q{} ? "Release has no cue file.\n"
                    : sprintf "Disc %s has no cue file", $disc->name;
                print {\*STDERR} $disc_cue_err;
                $exitcode = 1;
            }
        }
    }

    my $info_file = grep {m/ Info\.txt \z/xms} @{$rip->other_files};
    if (!defined $info_file) {
        print {\*STDERR}
            "Info.txt was not found the rip directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "Info.txt found.\n";
    }

    for my $d ($rip->dirs()) { validate_dir($d); }

    if ($opt{'--verbose'}) {
        if (!$exitcode) {
            print {\*STDERR}
                "Release is ready to be moved and converted to other formats.\n";
        }
        else {
            print {\*STDERR} 
                "Release is NOT ready to be moved and converted.\n";
        }
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

sub validate_dir {
    my $dir = shift;

    # Look for hidden files.
    if (@{$dir->hidden_files} > 0) {
        print {\*STDERR} 
            sprintf "Hidden files found in directory '%s'\n", $dir->path;
        my $rm_prompt
            = What::Prompt::YesNo->new(
                question => "dummy text.",
                default => 1);
        my $action_is_known = $opt{'--delete-hidden'} || $opt{'--keep-hidden'};
        my $should_delete_by_default = 0;
        my $cleared_hidden = 1;

        # Deal with hidden files individually.
        RMHIDDEN:
        for my $h ( @{$dir->hidden_files} ) {
            my $should_delete;
            if ( !$action_is_known ) {
                $rm_prompt->question("Delete hidden file '$h'?");
                $rm_prompt->prompt_user();
                $should_delete = $rm_prompt->response();
            }
            else {
                $should_delete 
                    = $opt{'--delete-hidden'} ? 1
                    : $opt{'--keep-hidden'} ? 0
                    : $should_delete_by_default;
            }
            if ($should_delete) {
                $subsys->exec('rm', $h) == 0
                    or die "Couldn't delete '$h'";
            }
            else {
                print {\*STDERR} "Hidden files can not be included in torrents."
                $cleared_hidden = 0;
                $exitcode = 1;
                last RMHIDDEN;
            }
        }

        $dir->hidden_files([]) if $cleared_hidden;
    }

    # Check for illegal filenames.
    for my $f ($dir->files()) {
        my $filename = basename($f);
        # Check the file name for illegal characters.
        if ($filename =~ $illegal_chars) {
            my $illegal = $1;
            print {\*STDERR} 
                sprintf "Illegal character '%s' in filename '%s'.\n",
                    $illegal, $filename;
            $exitcode = 1;
        }
    }
    for my $other ( @{$dir->other_files} ) {
        # Extract the file's extension
        my $ext = $other =~ m/ \. ([^.]+) \z/xms ? lc $1 : "";

        if ($other =~ m/Info\.txt\z/xms) {
            if (!$dir->is_root) {
                print {\*STDERR} "Info.txt found in non-root directory.\n";
                $exitcode = 1;
            }

        }
        # Any other files are not expected.
        # This may turn into an error at some point.
        elsif ($ext eq '') {
            print {\*STDERR} 
                "warning: Unexpected extension-less file $other found.\n";
        }
        else {
            print {\*STDERR} 
                "warning: Unexpected file of type $ext found; $other\n";
        }
    }

    if ($dir->is_disc) {
        validate_disc($dir);
    }
    else {
        validate_non_disc($dir);
    }
}

sub validate_disc {
    my $disc_dir = shift;
    if (@{$disc_dir->m3us} > 1) {
        print {\*STDERR} 
            sprintf "Multiple M3Us in disc directory '%s'\n", $disc_dir->path;
        $exitcode = 1;
    }
    if (@{$disc_dir->cues} > 1) {
        print {\*STDERR} 
            sprintf "Multiple cues in disc directory '%s'\n", $disc_dir->path;
        $exitcode = 1;
    }

    if (!$disc_dir->has_log()) {
        if (!$opt{'--no-log'}) {
            my $disc_log_err 
                = $disc_dir->name eq q{} ? "Release has no log file.\n"
                : sprintf "Disc %s has no log file", $disc_dir->name;
            print {\*STDERR} $disc_log_err;
        $exitcode = 1;
        }
    }
    if (!$disc_dir->has_cue()) {
        if (!$opt{'--no-cue'}) {
            my $disc_cue_err
                = $disc_dir->name eq q{} ? "Release has no cue file.\n"
                : sprintf "Disc %s has no cue file", $disc_dir->name;
            print {\*STDERR} $disc_cue_err;
            $exitcode = 1;
        }
    }
}

sub validate_non_disc {
    my $dir = shift;
    if ($dir->has_log()) {
        print {\*STDERR} 
            sprintf "Log found in non-disc directory '%s'\n", $dir->path;
        $exitcode = 1;
    }
    if ($dir->has_cue()) {
        print {\*STDERR} 
            sprintf "Cue found in non-disc directory '%s'\n", $dir->path;
        $exitcode = 1;
    }
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-ok
-- Check the rip directory for a full release.

=head1 VERSION

Version 0.0_1
Originally created on 07/18/10 23:19:19

=head1 USAGE

release-ok [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --no-cue

Do not require the release to have a cue file. This is not recommended.

=item --no-log

Do not require the release to have a log file. 
This is not recommended for CD rips.

=item --delete-hidden | -h

Remove any hidden files from the rip directory.
Any hidden files not deleted will cause an error.
If not provided, the user will be prompted for hidden file deletion.

=item --keep-hidden | -H

Decide to keep any hidden files found in the rip directory (default).
If hidden files are found, an error will occur and a non-zero exitcode returned.

=item --verbose

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Check that a flac release directory contains everything that it should.

TODO:

Check the flac for 100%

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

Â© The What team.

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
