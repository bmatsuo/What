#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob 'bsd_glob';
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::Release;
use What::WhatRC;
use What::Utils;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $illegal_chars = qr{([/?:])}xms;

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $whatrc = read_whatrc("~/.whatrc");

    my $rip_dir = $whatrc->{rip_dir};

    if (!-d $rip_dir) {
        print {\*STDERR} "Can't find rip directory $rip_dir.\n";
    }

    # TODO: This is not ideal. I should fix multi-CD releases.
    my @release_files 
        = find_hierarchy($rip_dir);
        # = (bsd_glob("$rip_dir/*"), bsd_glob("$rip_dir/CD*/*"));

    my @flac_files = grep {m/\.flac\z/xms} @release_files;
    if (!@flac_files) {
        print {\*STDERR} "No FLAC files found in FLAC directory.\n";
        $exitcode = 1;
    }
    if ($opt{'--verbose'}) {
        print {\*STDERR} scalar(@flac_files)." FLAC files found.\n";
    }

    my %disc_files = (map {($_ => [])} map {dirname($_)} @flac_files);
    my @disc_dirs = keys %disc_files;
    my $num_discs = scalar @disc_dirs;
    if ($num_discs == 0) {
        print {\*STDERR} "Unexpected error: No discs found?! o.O\n";
        $exitcode = 1;
    }
    if ($opt{'--verbose'}) {
        print {\*STDERR} "$num_discs discs found.\n":
    }

    my @images = grep {m/\.(?: jpg | tiff | png )\z/xms} @release_files;
    if (!@images){
        print {\*STDERR} "No images found.\n";
        $exitcode = 1;
    }
    if ($opt{'--verbose'}) {
        print {\*STDERR} scalar(@images)." Images found.\n";
    }

    my @log_files = grep {m/\.log\z/xms} @release_files;
    my @discs_w_log;
    for my $log (@log_files) {
        my $log_disc = dirname($log);
        if (!defined $disc_files{$log_disc}) {
            # One *might* put logs in rip_dir, or in a separate log dir.
            # This is not common, and it's hard to match up in a script.
            # So it is an error.
            print {\*STDERR} "Log found in directory w/o FLAC files; ",
                $log, "\n";
            $exitcode = 1;
        }
        else {
            push @{$disc_files{$log_disc}}, $log;
            push @discs_w_log, $log_disc;
        }
    }
    if (@discs_w_log < @disc_dirs) {
        my @discs_wo_log = do {
            my %good = (map {($_ => 1)} @discs_w_log);
            my @bad = grep {!defined $good{$_}} @disc_dirs;
            @bad;
        };
        my $num_wo_log = scalar @discs_wo_log;
        print {\*STDERR} 
            "Found $num_wo_log discs w/o rip logs;\n",
            join ("\n", @discs_wo_log);
        $exitcode = 1;
    }

    my @cue_files = grep {m/\.cue\z/xms} @release_files;
    my @discs_w_cue;
    for my $cue (@cue_files) {
        my $cue_disc = dirname($cue);
        if (!defined $disc_files{$cue_disc}) {
            # It doesn't make much sense to put a cue in a non-disc dir.
            print {\*STDERR} "Cue found in directory w/o FLAC files; ",
                $cue, "\n";
            $exitcode = 1;
        }
        else {
            push @{$disc_files{$cue_disc}}, $cue;
            push @discs_w_cue, $cue_disc;
        }
    }
    if (@discs_w_cue < @disc_dirs) {
        my @discs_wo_cue = do {
            my %good = (map {($_ => 1)} @discs_w_cue);
            my @bad = grep {!defined $good{$_}} @disc_dirs;
            @bad;
        };
        my $num_wo_cue = scalar @discs_wo_cue;
        print {\*STDERR} 
            "Found $num_wo_cue discs w/o a cue file;\n",
            join ("\n", @discs_wo_cue);
        $exitcode = 1;
    }

    my @m3u_files = grep {m/\.m3u\z/xms} @release_files;
    my @discs_w_m3u;
    for my $m3u (@m3u_files) {
        my $m3u_disc = dirname($m3u);
        if (!defined $disc_files{$m3u_disc}) {
            print {\*STDERR} "warning:",
                "M3U found in directory w/o FLAC files; $cue\n";
            # For now, this is not considered an error.
            # You might want to put multiple discs into an extra m3u.
            # $exitcode = 1;
        }
        if (defined $disc_files{$m3u}) {
            push @{$disc_files{$m3u_disc}}, $m3u;
            push @discs_w_m3u, $m3u_disc;
        }
    }
    if (@discs_w_m3u < @disc_dirs) {
        # This isn't actually a big deal; mkm3u will find and make.
        # my @discs_wo_m3u = do {
        #     my %good = (map {($_ => 1)} @discs_w_m3u);
        #     my @bad = grep {!defined $good{$_}} @disc_dirs;
        #     @bad;
        # };
        # my $num_wo_m3u = scalar @discs_wo_m3u;
        # print {\*STDERR} 
        #     "Found $num_wo_m3u discs w/o an m3u playlist;\n",
        #     join ("\n", @discs_wo_m3u);
        # $exitcode = 1;
    }

    my $info_file = find_file_pattern("Info.txt", $rip_dir);
    if (!defined $info_file) {
        print {\*STDERR}
            "Info.txt was not found the rip directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "Info.txt found.\n";
    }

    my @hidden_files 
        # Need to make find_hierarchy find hidden files.
        # = grep {m!/\..*!xms} @release_files;
        = map {basename($_)} bsd_glob("$rip_dir/.*");
        shift @hidden_files; shift @hidden_files;
    if (scalar @hidden_files) {
        print {\*STDERR} "Hidden files found; @hidden_files\n";
        $exitcode = 1;
    }

    # Run over all the files to look for errors and unexpected files.
    for my $file (@release_files) {
        my $name = basename($file);

        # Check the file name for illegal characters.
        if ($name =~ $illegal_chars) {
            print {\*STDERR} 
                "Illegal character $1 in filename '$name'.\n";
            $exitcode = 1;
        }

        # Check if the file is hidden (redundant check).
        if ($name =~ m/\A \. .+ \z/xms) {
            print {\*STDERR}
                "Hidden file found that should't be in torrent; $name\n";
            $exitcode = 1;
        }

        # Extract the file's extension
        my $ext = $file =~ m/ \. ([^.]+) \z/xms ? lc $1 : "";

        # Categorize the file.
        if ($ext eq 'flac') {}
        elsif ($ext eq 'log') {}
        elsif ($ext eq 'cue') {}
        elsif ($ext eq 'm3u') {}
        elsif ($ext =~ m/\A(?: tiff | jpg | png )\z/xms) {}
        elsif ($file eq "$rip_dir/Info.txt") {}
        elsif (-d $file) {} # Ignore directories.
        # Any other files are not expected.
        # This may turn into an error at some point.
        elsif ($ext eq '') {
            print {\*STDERR} 
                "warning: Unexpected extension-less file $file found.\n";
        }
        else {
            print {\*STDERR} 
                "warning: Unexpected file of type $ext found; $file\n";
        }
    }

    if ($opt{'--verbose'}) {
        if (!$exitcode) {
            print {\*STDERR}
                "Release is ready to be moved and converted to MP3.\n";
        }
        else {
            print {\*STDERR} 
                "Release is NOT ready to be moved and converted.\n";
        }
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

# Subroutine: release_dir_is_complete($dir)
# Type: INTERFACE SUB
# Purpose: Check that all desired files are in a release directory.
# Returns: 
sub release_dir_is_complete {
    my $dir = shift;

    my $disc_dir_pattern = "$dir/CD*";

    my @discs = bsd_glob($disc_dir_pattern);

    my $is_multidisc = scalar @discs;

    push @discs, "" if !$is_multidisc;

    find_supplemental_files($dir);

    for my $disc_dir (@discs) { check_music_dir($disc_dir); }

    return;
}

sub find_supplemental_files {
    my $dir = shift;
    my $supplements_ok = 1;

    # Find release description text file, Info.txt.
    my $info = "$dir/Info.txt";

    if (!-e $info) {
        print {\*STDERR} "Can't find description $info.\n";
        $exitcode = 1;
        $supplements_ok = 0;
    }

    # Find images (JPEG, TIFF, PNG)
    my @images = grep {
        m/\. (jpg | tiff | png) \z/xms;
    } bsd_glob("$dir/*.*");

    if (!@images) {
        print {\*STDERR} "No images were found.\n";
        $exitcode = 1;
        $supplements_ok = 0;
    }

    return $supplements_ok;
}

sub check_music_dir {
    my $dir = shift;
    my $music_dir_ok = 1;

    my @flac_files = bsd_glob("$dir/*.flac");

    if (!@flac_files) {
        print {\*STDERR} "No FLAC audio files found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    my @log_files = bsd_glob("$dir/*.log");

    if (!@log_files) {
        print {\*STDERR} "No rip log found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    my @cue_files = bsd_glob("$dir/*.log");

    if (!@cue_files) {
        print {\*STDERR} "No CUE file found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    if (@cue_files > 1) {
        print {\*STDERR} "Multiple CUE files found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    return $music_dir_ok;
}

sub check_cue_file {
    my $cue_path = shift;
}

sub check_log_file {
    my $log_path = shift;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-ok
-- short description

=head1 VERSION

Version 0.0_1
Originally created on 07/18/10 23:19:19

=head1 USAGE

release-ok [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --verbose

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Check that a flac release directory contains everything that it should.

TODO:

Check the flac for 100%

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

©Bryan Matsuo (bryan.matsuo@gmail.com)

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
