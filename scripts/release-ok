#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob 'bsd_glob';
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::Release;
use What::WhatRC;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $illegal_chars = qr{([/?:])}xms;

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $whatrc = read_whatrc("~/.whatrc");

    my $rip_dir = $whatrc->{rip_dir};

    $rip_dir =~ s/(\[ | \] | [{}*?])/\\$1/xms;

    if (!-d $rip_dir) {
        print {\*STDERR} "Can't find rip directory $rip_dir.\n";
    }

    # TODO: This is not ideal. I should fix multi-CD releases.
    my @release_files 
        = (bsd_glob("$rip_dir/*"), bsd_glob("$rip_dir/CD*/*"));

    my @flac_files;
    my @images;
    my @log_files;
    my @cue_files;
    my @m3u_files;
    my $info_file;
    my $num_discs = 1;

    my @hidden_files = map {basename($_)} bsd_glob("$rip_dir/.*");

    shift @hidden_files; shift @hidden_files;

    if (scalar @hidden_files) {
        print {\*STDERR} "Hidden files found; @hidden_files\n";
        $exitcode = 1;
    }

    for my $file (@release_files) {

        my $name = basename($file);

        if ($name =~ $illegal_chars) {
            print {\*STDERR} 
                "Illegal character $1 in filename '$name'.\n";
            $exitcode = 1;
        }

        if ($name =~ m/\A \. .+ \z/xms) {
            print {\*STDERR}
                "Hidden file found that should't be in torrent; $name\n";
            $exitcode = 1;
        }

        # Extract the file's extension
        my $ext = $file =~ m/ \. ([^.]+) \z/xms ? lc $1 : "";

        if ($ext eq 'flac') { push @flac_files, $file }
        elsif ($ext eq 'tiff' or $ext eq 'jpg') { push @images, $file }
        elsif ($ext eq 'log') { push @log_files,  $file }
        elsif ($ext eq 'cue') { push @cue_files, $file }
        elsif ($ext eq 'm3u') { push @m3u_files, $file }
        elsif (basename($file) eq "Info.txt") { $info_file = $file }
        elsif (-d $file && $file =~ m/CD(\d+)/xms) {
            my $n = $1;
            $num_discs = $n if $n > $num_discs;
        }
        elsif ($ext eq '') {
            print {\*STDERR} 
                "warning: File with no extension $file found.\n";
        }
        else {
            print {\*STDERR} 
                "warning: File with unexpected type $ext found; $file\n";
        }
    }

    if (!@flac_files) {
        print {\*STDERR} "No FLAC files found in FLAC directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} scalar(@flac_files)." FLAC files found.\n";
    }

    if (!@images){
        print {\*STDERR} "No TIFF images found in FLAC directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} scalar(@images)." TIFF images found.\n";
    }

    if (@log_files < $num_discs) {
        print {\*STDERR}
            "Missing log files for $num_discs discs. Found \n";
        print {\*STDERR}
            join "\n", @log_files, "";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "Log file found.\n";
    }

    if (!defined $info_file) {
        print {\*STDERR}
            "Info.txt was not found in flac directory.\n";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "Info.txt found.\n";
    }

    if (@cue_files < $num_discs) {
        print {\*STDERR}
            "Missing cue files for $num_discs discs. Found \n";
        print {\*STDERR}
            join "\n", @cue_files, "";
        $exitcode = 1;
    }
    elsif ($opt{'--verbose'}) {
        print {\*STDERR} "CUE file found.\n";
    }

    if ($opt{'--verbose'}) {
        if (!$exitcode) {
            print {\*STDERR}
                "Release is ready to be moved and converted to MP3.\n";
        }
        else {
            print {\*STDERR} 
                "Release is NOT ready to be moved and converted.\n";
        }
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

# Subroutine: release_dir_is_complete($dir)
# Type: INTERFACE SUB
# Purpose: Check that all desired files are in a release directory.
# Returns: 
sub release_dir_is_complete {
    my $dir = shift;

    my $disc_dir_pattern = "$dir/CD*";

    my @discs = bsd_glob($disc_dir_pattern);

    my $is_multidisc = scalar @discs;

    push @discs, "" if !$is_multidisc;

    find_supplemental_files($dir);

    for my $disc_dir (@discs) { check_music_dir($disc_dir); }

    return;
}

sub find_supplemental_files {
    my $dir = shift;
    my $supplements_ok = 1;

    # Find release description text file, Info.txt.
    my $info = "$dir/Info.txt";

    if (!-e $info) {
        print {\*STDERR} "Can't find description $info.\n";
        $exitcode = 1;
        $supplements_ok = 0;
    }

    # Find images (JPEG, TIFF, PNG)
    my @images = grep {
        m/\. (jpg | tiff | png) \z/xms;
    } bsd_glob("$dir/*.*");

    if (!@images) {
        print {\*STDERR} "No images were found.\n";
        $exitcode = 1;
        $supplements_ok = 0;
    }

    return $supplements_ok;
}

sub check_music_dir {
    my $dir = shift;
    my $music_dir_ok = 1;

    my @flac_files = bsd_glob("$dir/*.flac");

    if (!@flac_files) {
        print {\*STDERR} "No FLAC audio files found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    my @log_files = bsd_glob("$dir/*.log");

    if (!@log_files) {
        print {\*STDERR} "No rip log found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    my @cue_files = bsd_glob("$dir/*.log");

    if (!@cue_files) {
        print {\*STDERR} "No CUE file found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    if (@cue_files > 1) {
        print {\*STDERR} "Multiple CUE files found in $dir.\n";
        $exitcode = 1;
        $music_dir_ok = 0;
    }

    return $music_dir_ok;
}

sub check_cue_file {
    my $cue_path = shift;
}

sub check_log_file {
    my $log_path = shift;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-ok
-- short description

=head1 VERSION

Version 0.0_1
Originally created on 07/18/10 23:19:19

=head1 USAGE

release-ok [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --verbose

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Check that a flac release directory contains everything that it should.

TODO:

Check the flac for 100%

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
