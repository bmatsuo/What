#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use Carp;
use POSIX;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;
use Audio::FLAC::Header;

# Include private modules.
use What::Discogs;
use What::Utils;
use What::WhatRC;
use What::Prompt;
use What::Prompt::Choose;
use What::Prompt::YesNo;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $whatrc = read_whatrc('~/.whatrc');
my $prompt = What::Prompt->new();

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    # Find all the disc directories/FLAC files.
    my @rip_files = find_hierarchy($whatrc->{rip_dir});
    my @flac_files = grep {$_ =~ / \.flac \z/xms} @rip_files;
    my %disc = map {($_ ? (dirname($_) => {}) : ())} @flac_files;
    my @disc_dirs = sort keys %disc;
    my @disc_folder_names = map {basename($_)} @disc_dirs;

    # Find info about all the present discs.
    my $release_artist;
    my $release_title;
    my $release_year;
    my $release_label;
    my $release_catno;
    my $release_format;
    my $release_edition;
    for my $disc_dir (keys %disc) {
        print {\*STDERR} $disc_dir, "\n";
        next if !defined $disc_dir || !-d $disc_dir;
        # Get the song files.
        my @disc_files = find_file_pattern('*.flac', $disc_dir);
        @disc_files = sort @disc_files;
        croak("No FLAC files found in $disc_dir. This is unexpected...\n")
            if (!@disc_files);

        # Help subroutine to parse track position from the filename.
        my $get_position_from_file = sub {
                my $file = basename(shift); 
                $file =~ s/(\s | -) .* \z//xms; 
                return $file; };

        my @tracks;
        my $disc_artist;
        my $disc_title;
        my $disc_year;
        # Read the tags of each song.
        for my $song (@disc_files) {
            my $info = Audio::FLAC::Header->new($song);
            my %tags = %{$info->{tags}};

            # Fetch the important tags.
            my $pos = $get_position_from_file->($song);
            my $title = $tags{TITLE} || $tags{title} || $tags{Title};
            my $artist = $tags{ARTIST} || $tags{artist} || $tags{Artist};
            my $album_artist = $tags{ALBUMARTIST} || $tags{albumartist} || $tags{Albumartist};
            my $date = $tags{date} || $tags{DATE} || $tags{Date};
            my $year;
            if ($date =~ m/(\d{4})/xms) {
                $year = $1;
            }
            else {
                print {\*STDERR}
                    "Warning: Can't find year in release\n";
            }
            my $release_title = $tags{ALBUM} || $tags{album} || $tags{Album};
            if (defined $album_artist) { 
                $disc_artist = $album_artist if (!defined $disc_artist);
                if (not $disc_artist eq $album_artist) {
                    print {\*STDERR} 
                        "Inconsistency: ",
                        "Album artist ($album_artist vs $release_artist)\n";
                }
            }

            # find the track duration.
            my $dur = $info->{trackTotalLengthSeconds};

            # Construct a 'track object'.
            my %track = (
                artist => $artist,
                (defined $album_artist ? (album_artist => $album_artist) : ()),
                release => $release_title,
                position => $pos,
                duration => $dur,
                year => $year,
                title   => $title,);
            push @tracks, \%track;
        }

        # Find an artist for the disc.
        if (!defined $disc_artist) {
            my @artists = map {$_->{artist}} @tracks;
            if (all_equal(@artists)) {
                $disc_artist = $artists[0];
            }
            else {
                $disc_artist = common_prefix(@artists);
            }
            if (!defined $disc_artist || 0 == length $disc_artist) {
                $disc_artist = "Various Artists";
            }
        }

        # Find a title for the disc.
        my @release_titles = map {$_->{release}} @tracks;
        if (all_equal(@release_titles)) {
            $disc_title = $release_titles[0];
        }
        else {
            croak("Inconsistency: "
                . "Album tag for files of "
                . basename($disc_dir) . ".");
        }

        # Find a year for the disc.
        my @years = map {$_->{year}} @tracks;
        if (!all_equal(@years)) {
            croak("Inconsistency: Years for disc "
                . basename($disc_dir) . ".");
        }
        $disc_year = $years[0];

        # Create a 'disc' object.
        my %disc_info = (
            title => $disc_title,
            artist => $disc_artist,
            year => $disc_year,
            tracks => \@tracks,);
        $disc{$disc_dir} = \%disc_info;
    }

    # Figure out the year of the whole release.
    my @disc_years = map {$_->{year}} values %disc;
    if (!all_equal(@disc_years)) {
        croak("Inconsistency: Varying disc years.")
    }
    $release_year = $disc_years[0];

    # Figure out the title for the whole release.
    my @disc_titles = map {$_->{title}} values %disc;
    if (!all_equal(@disc_titles)) {
        $release_title = common_prefix(@disc_titles);
    }
    else {
        $release_title = $disc_titles[0];
        print {\*STDERR} "Using title $release_title.\n";
    }
    if (!defined $release_title || 0 == length $release_title) {
        croak("Couldn't find a release title common to all discs.");
    }

    # Find the artist for the whole release.
    my @disc_artists = map {$_->{artist}} values %disc;
    if (!all_equal(@disc_artists)) {
        my @non_various = grep {$_ !~ /Various(?:\sArtists)?/ixms} @disc_artists;
        if (all_equal(@non_various) && @non_various > 0) {
            $release_artist = $non_various[0];
        }
        elsif (@non_various > 0) {
            if (all_equal(@non_various)) {
                # All the discs by a single artist are by the same artist.
                # That artist is probably the release artist
                # TODO: Prompt user to make sure.
                $release_artist = $non_various[0];
            }
            else {
                # Multiple discs produced by a single artist.
                # However, not all the disc artists are the same.
                
                # Attempt to salvage
                $release_artist = common_prefix(@non_various);
                if ($release_artist == '') {
                    # TODO: Prompt user about which artists to use.
                    $release_artist = 'Various Artists';
                }
                else {
                    # If each disc is featuring other artsists, 
                    #  hopefully they got filtered.
                    # TODO: Prompt user to make sure $release_artist is good.
                }
            }
        }
        else {
            # Looks like all the discs are by various artists
            # TODO: Prompt user to make sure.
            $release_artist = "Various Artists";
        }
    }
    else {
        # In this case, all discs are by the same artist.
        $release_artist = $disc_artists[0];
    }

    print "I think that this release should be labelled...\n";
    print "$release_artist - $release_title [$release_year]\n";

    #-------------------------#
    # BEGIN SEARCHING DISCOGS #
    #-------------------------#
    my $release; # A pointer to the release when we find it.
    my @artists_checked;
    if (not $release_artist eq "Various Artists"){
        # First, try an artist query.
        $release = find_release_in_artist_page(
            artist => $release_artist,
            title => $release_title,
            year => $release_year,
            discs => [values %disc]);

        if (!defined $release) {
            print {\*STDERR} "Initial artist query failed. ";
            print {\*STDERR} "Attempting an artist search.\n";
            # TODO: When unsuccessful w/ artist query; try an artist search.
            my $artist_search_results = search(
                qstr => $release_artist, 
                type => 'artist', 
                api => $whatrc->{discogs_api_key});
            my $matching_result_list 
                = $artist_search_results->grep(
                    sub {my $a = shift; align($a->title, $release_artist) > 0.83});
            if ($matching_result_list->num_results > 0) {
                for my $r (@{$matching_result_list->results()}) {
                    $release = find_release_in_artist_page(
                        artist => $r->title(),
                        title => $release_title,
                        year => $release_year,
                        discs => [values %disc]);
                    last if defined $release;
                    #$release = undef;
                }
            }
            else {
                print {\*STDERR} "Can not find a matching result in the artist query.\n";
            }
        }
    }

    if (!defined $release) {
        # Either artist search failed or artist is "Various Artists"
        print {\*STDERR} "Attempting general search.\n";
        my $release_search = search (
            qstr => $release_artist eq "Various Artists" ? $release_title 
                : "$release_artist - $release_title",
            type => 'release',
            api => $whatrc->{discogs_api_key},);
        $release = find_release_in_search_results(
            results => $release_search,
            artist => $release_artist,
            title => $release_title,
            year => $release_year,
            discs => [values %disc]);
    }
    # TODO: When Discogs search fails, search Musicbrainz if possible.

    # When the all searches failed to find a release. 
    if (!defined $release) {
        # TODO: Ask the user for a musicbrainz release identifier.
        # Ask the user for a discogs release id 
        $prompt->text('Enter a discogs release ID (check format/edition):');
        $prompt->validator(sub {my $id = shift; $id =~ m/\A \d* \z/xms});
        my $discogs_id = $prompt->prompt_user();
        chomp $discogs_id;
        $release = get_release(
                id => $discogs_id, 
                api => $whatrc->{discogs_api_key})
            if $discogs_id =~ m/\d+/xms;

        my $is_consistent 
            = release_agrees(
                release => $release, 
                title => $release_title,
                artist => $release_artist,
                year => $release_year,
                discs => [values %disc],);
        if (!$is_consistent) {
            # Die if the discsogs release is not conistent with the files.
            print {\*STDERR} "Inconsistent release info and tag info.\n";
            exit 1;
        }
    }

    
    if (defined $release) {
        # TODO: Handle a Musicbrainz release.
        $release_label = join ", ", (map {$_->name()} @{$release->labels()});
        $release_catno = join ", ", (map {$_->catno()} @{$release->labels()});
        $release_format
            = join ", ",
                (map {$_->quantity() > 1 ? 
                        $_->quantity() ."x".$_->type()
                        : $_->type() }
                    @{$release->formats()});
        $release_edition 
            = join ", ",
                (map {join " ", @{$_->descriptions()}} @{$release->formats()});
    }
    else {
        # When the user can't find a release id, create info from tags.
        print "'Manual' info creation...\n";
        # Prompt user for label and catno.
        $prompt->text("Enter the label:");
        $prompt->validator(sub {my $r = shift; chomp $r; $r =~ /.\z/xms});
        $release_label = $prompt->prompt_user();
        $prompt->text("Enter the category number (on CD side):");
        $release_catno = $prompt->prompt_user();
        $prompt->text("Enter any edition information(none for original release):");
        $prompt->reset_validator();
        $release_edition = $prompt->prompt_user();
        if ($release_edition =~ s/\A \s*\n? \z//xms) {
            $release_edition = "Original Release";
        }
    }

    my $info =<<EOIHEAD;
Title.....$release_title
Artist....$release_artist
Edition...$release_edition
Released..$release_year 
Label.....$release_label
Catno.....$release_catno

EOIHEAD

    for my $disc_d (@disc_dirs) {
        if (@disc_dirs > 1) {
            my $disc_name = basename($disc_d);
            $info .= "$disc_name\n";
        }

        my $disc = $disc{$disc_d};
        my @tracks = @{$disc->{tracks}};
        for my $track (@tracks) {
            my $dur = $track->{duration};
            my ($min, $sec) = (floor($dur / 60), floor($dur % 60));
            $info .= "$track->{position} $track->{title} [$min:$sec]";
            if ($release_artist eq 'Various Artists') {
                $info .= " ($track->{artist})";
            }
            $info .= "\n";
        }

        if (@disc_dirs > 1) {
            $info .= "\n";
        }
    }

    my $info_filename = "$release_artist - $release_title ($release_year).nfo";
    $info_filename =~ s![/:]!_!gxms;
    my $info_path = "$whatrc->{rip_dir}/$info_filename";
    die "Info file exists at $info_path." 
        if -e $info_path;

    open my $ifh, ">", $info_path
        or die "couldn't open $info_path.";

    print {$ifh} $info;

    close $ifh;

    exit $exitcode;
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

# Subroutine: find_release_in_search_results(
#   results => $results,
#   artist => $artist,
#   title => $title,
#   year => $edition_year,
#   discs => \@discs)
# Type: INTERNAL UTILITY
# Purpose: 
# Returns: 
sub find_release_in_search_results {
    shift;
    my $results = shift;
    my %r = @_;

    my $title = $r{title};
    my $artist = $r{artist};
    $artist =~ s/\AVarious\s+Artists\z/Various/xms;

    my @exact_results 
        = grep {uc "$artist - $title" eq uc $_->title} @{$results->results};

    if (@exact_results > 0) {
        my @release_ids = map {$_->uri_identifier} @exact_results;
        my @exacts
            = map { get_release(id => $_, api => $whatrc->{discogs_api_key})} 
            @release_ids;
        my @exact_fits 
            = grep { release_agrees(release=> $_, %r)} @exacts;
        my @exact_choices = map {summarize_perfect_match($_)} @exact_fits;
        if (@exact_fits > 1) {
            my $exact_choice_p = What::Prompt::Choose->new(
                text => "Which release has the most accurate info?",
                choices => \@exact_choices);
            my $exact_choice = $exact_choice_p->prompt_user;
            print {\*STDERR} "Chose $exact_choice.\n";
            return $exact_fits[$exact_choice];
        }
        elsif (@exact_fits) {
            return $exact_fits[0];
        }
    }

    my @result_scores 
        = map {align("$artist - $title", $_->title)} @{$results->results};
    my @sorted_indices 
        = sort {$result_scores[$a] <=> $result_scores[$b]} (0 .. $#result_scores);
    my @narrowed_indices = grep {$result_scores[$_] > 0.82} @sorted_indices;
    my @narrowed_releases 
        = map {
            get_release(id => $results->get_result($_)->uri_identifier, api => $whatrc->{discogs_api_key})} 
        @sorted_indices;
    my @matching_releases = grep {release_agrees(release => $_, %r)} @narrowed_releases;
    if (@matching_releases) {
        if (@matching_releases > 1) {
            my @match_choices = map {summarize_match($_)} @matching_releases;
            my $matching_p = What::Prompt::Choose->new(
                text => "Which release has the most accurate info?",
                choices => \@match_choices);
            my $choice = $matching_p->prompt_user;
            #print {\*STDERR} "Chose $choice.\n";
            return $matching_releases[$choice];
        }
        else {
            return $matching_releases[0];
        }
    }

    return;
}

# Subroutine: find_release_in_artist_page(
#   artist => $artist,
#   title => $title,
#   year => $edition_year,
#   discs => \@discs)
# Type: INTERNAL UTILITY
# Purpose: Perform an artist query and find a matching release.
#   Can fail if there's an inconsistency in artist naming between discogs and tags.
#   Can also fail when the proper artist has an unknown copy number.
# Returns: A What::Discogs::Release object when a matching release is found.
#   Returns a void otherwise.
sub find_release_in_artist_page {
    # The arguments act as a 'release' object.
    my @checked_releases;
    my %r = @_;
    my $artist = $r{artist};
    my $title = $r{title};
    my $artist_discog;
    eval { $artist_discog = get_artist(
            name => $artist, api => $whatrc->{discogs_api_key}); };
    return if !defined $artist_discog;

    my @releases = @{$artist_discog->releases};

    # Look for releases that have the same title.
    my @exact_matches = grep { $title eq $_->title } @releases;

    if (@exact_matches) {
        print "Exact matches found in artist discography. ";
        print "Fetching releases...\n";
        my @exacts
            = map {get_release(
                    id => $_->id, api => $whatrc->{discogs_api_key})} 
            @exact_matches;
        my @perfect_fits
            = grep {release_agrees(release=>$_, %r)} @exacts;
        if (@perfect_fits) {
            if (@perfect_fits > 1) {
                # Have the user select the proper release.
                my @perfect_choices 
                    = map {summarize_perfect_match($_)} @perfect_fits;
                my $pp = What::Prompt::Choose->new(
                    text => "Multiple release with matching info found\n"
                        . "Which release has the most accurate info?",
                    choices => \@perfect_choices);
                my $choice = $pp->prompt_user();
                #print {\*STDERR} "Chose $choice.\n";
                return $perfect_fits[$choice];
            }
            else {
                return $perfect_fits[0];
            }
        }
        else {
            print {\*STDERR} "Non of the exact matches fit properly.\n";
            return;
        }
    }

    # Look for releases that have most of the words in the title.
    my @near_matches = grep {words_fit($title, $_->title) > .81} @releases;

    if (@near_matches) {
        print {\*STDERR} "Near matches found in the artist discography.";
        print {\*STDERR} "(This logic has not been implemented yet).\n";
    }

    return;
}

# Subroutine: summarize_match($discogs_release)
# Type: INTERNAL UTILITY
# Purpose: Make a short summary of a matching release.
# Returns: Nothing
sub summarize_match {
    my ($dr) = @_;
    my $short_summ = summarize_perfect_match($dr);
    my $summ = join q{}, 
        $dr->artist_string, " - ", $dr->title, " [", $dr->date, "]\n", 
        $short_summ;
    return $summ;
}


# Subroutine: summarize_perfect_match($discogs_release)
# Type: INTERNAL UTILITY
# Purpose: 
#   Make a short summary of the most important information for perfect matches.
# Returns: 
#   A string listing the labels, catnos, country, formats of a release
sub summarize_perfect_match {
    my $dr = shift;
    my $label_str = join ", ", (map {$_->name} reverse @{$dr->labels});
    my $catno_str = join ", ", (map {$_->catno} reverse @{$dr->labels});
    my @format_descs = map {join ", ", @{$_->descriptions}} @{$dr->formats};
    my @format_strs;
    for my $i ($#format_descs) {
        my $f = $dr->formats->[$i];
        my $f_str = $f->type;
        if ($f->quantity > 1) {
            $f_str = join "x", $f->quantity, $f_str;
        }
        my $f_desc = $format_descs[$i];
        $f_str .= " $f_desc"
            if $f_desc =~ /./xms;
        push @format_strs, $f_str;
    }
    my $formats_str = join ", ", (map {"[$_]"} @format_strs);
    $label_str =~ s/\A (.{30}).+ \z/$1.../xms;
    my $summ 
        = sprintf "labels: %-33s catnos: %s\n    country: %s formats: %s",
            $label_str, $catno_str, $dr->country, $formats_str;
    return $summ;
}

# Subroutine: release_agrees(
#   release => $release, 
#   artist => $artist,
#   title => $title,
#   year => $edition_year,
#   discs => \@discs)
# Type: INTERNAL UTILITY
# Purpose: Check a discogs release, and given release info for consistency.
# Returns:
#   1 if the discogs release contains consistent release information.
#   0 otherwise.
sub release_agrees {
    my %arg = @_;
    my $release = $arg{release};
    return if !release_title_agrees($release, $arg{title});
    #print "Title agrees\n";
    return if !release_artist_agrees($release, $arg{artist});
    #print "Artist agrees\n";
    return if !release_year_agrees($release, $arg{year});
    #print "Year agrees\n";
    return if !release_discs_agree($release, $arg{discs});
    #print "Discs agree\n";
    print "Found an agreeing release...\n";
    return 1;
}

# Release test template.
# Subroutine: release_xxxx_agrees($discogs_release, $release_xxxx)
# Type: INTERNAL UTILITY
# Purpose: Compare the xxxx of a discogs release to a given string.
# Returns: 
#   1 if the title of the discogs release is equal to $release_xxxx.
#   0 otherwise.
#sub release_xxxx_agrees {
#    return 0;
#}

# Subroutine: release_title_agrees($discogs_release, $release_title)
# Type: INTERNAL UTILITY
# Purpose: Compare the title of a discogs release to a given string.
# Returns: 
#   1 if the title of the discogs release is equal to $release_title.
#   0 otherwise.
sub release_title_agrees {
    my ($release, $title) = @_;
    return 1 if ($release->title() eq $title);
    return 0;
}

# Subroutine: release_year_agrees($discogs_release, $release_year)
# Type: INTERNAL UTILITY
# Purpose: Compare the year of a discogs release to a given string.
# Returns: 
#   1 if the title of the discogs release is equal to $release_year.
#   0 otherwise.
sub release_year_agrees {
    my ($release, $year) = @_;
    my $date = $release->date();
    return 1;
}

# Subroutine: release_discs_agree($discogs_release, \@discs)
# Type: INTERNAL UTILITY
# Purpose: 
#   Attempt to match of the the release to an array of discs' info.
#   For now, a simple 'down-the-line' test of agreement for each disc.
# Returns: 
#   1 if the discs of the discogs release \@discs.
#   0 otherwise.
sub release_discs_agree {
    my $release = shift;
    my @discs = @{shift @_};
    return 0 if $release->num_discs != scalar @discs;
    for my $i (0 .. $#discs) {
        my $di = $discs[$i];
        my $rel_di = $release->disc($i + 1);
        return 0 if !disc_tracks_agree($rel_di, $di->{tracks});
    }
    return 1;
    # TODO: Implement this method as a permutation search. 
    #   There is not necessarily a guaranteed ordering.
}

# Subroutine: disc_tracks_agree($disc, \@tracks)
# Type: INTERNAL UTILITY
# Purpose: 
#   Compare the tracks of a discogs release's disc to a given array of track info.
# Returns: 
#   1 if the tracks of the disc agree with $release_tracks.
#   0 otherwise.
sub disc_tracks_agree {
    my ($disc, $tracks_ref) = @_;
    my @rel_tracks = @{$disc->tracks()};
    my @tracks = @{$tracks_ref};

    # Return false if the number of tracks differ.
    if ($disc->num_tracks != @tracks) {
        print {\*STDERR} 
            "Discs with different numbers of tracks; ",
            $disc->num_tracks, " and ", scalar @tracks, "\n";
        return 0;
    }

    # Iterate over corresponding tracks.
    for my $i (0 .. $#tracks) {
        my ($rel_ti, $ti) = ($rel_tracks[$i], $tracks[$i]);

        # Find the duration of the discogs track in seconds.
        my $rel_dur = $rel_ti->duration();
        if ($rel_dur =~ m/(\d+):(\d{2})/xms) {
            $rel_dur = 60 * $1 + $2;
        }
        # Return false if discogs duration is more than the possed duration.
        if ($rel_dur > $ti->{'duration'} + 10) {
            print {\*STDERR} 
                "Track ",$ti->{'position'}," has disagreeing length; ", 
                $rel_dur, " <= ", $ti->{'duration'} + 10, "\n";
            return 0;
        }
    }
    # Track names might be subtly misspelled. Are not checked currently.

    # No reason can be found for the tracks to disagree.
    return 1;
}

# Subroutine: release_artist_agrees($discogs_release, $release_artist)
# Type: INTERNAL UTILITY
# Purpose: Compare the artist of a discogs release to a given string.
# Returns: 
#   1 if the title of the discogs release is equal to $release_artist.
#   0 otherwise.
sub release_artist_agrees {
    my ($release, $artist) = @_;
    for my $a (@{$release->artists()}) {
        return 0 if index ($artist, $a->name) == -1;
        $a =~ s/\AThe\s+(\S.*\S)\z/$1, The/xms;
        return 0 if index ($artist, $a->name) == -1;
    }
    return 1;
}

# Subroutine: all_equal(@strings)
# Type: INTERNAL UTILITY
# Purpose: Check if all strings in a list are equal.
# Returns: True if all the strings are the same.
sub all_equal {
    my @strings = @_;
    my $last;
    for my $str (@strings) {
        if (!defined $last) {
            $last = $str;
        }
        else {
            return if not $last eq $str;
        }
    }
    return 1;
}

# Subroutine: common_prefix(@strings)
# Type: INTERNAL UTILITY
# Purpose: Find the longest prefix string common to a list.
# Returns: 
#   Returns the longest prefix string. 
#   If no non-trivial prefix exists then an empty string is returned.
sub common_prefix {
    my @strings = @_;
    my $prefix = shift @strings || '';
    for my $s (@strings) { $prefix = common_prefix_pair($prefix, $s) }
    return $prefix;
}

# Subroutine: suffixes(@strings)
# Type: INTERNAL UTILITY
# Purpose: Remove the common prefix from all argument strings.
# Returns: A list of strings with the common prefix removed.
sub suffixes {
    my @strings = @_;
    my $prefix = common_prefix(@strings);
    my $rm_len = length $prefix;
    map {substr $_, 0, $rm_len, q()} @strings;
    return @strings;
}


# Subroutine: common_prefix_pair($s1, $s2)
# Type: INTERNAL UTILITY
# Purpose: Find the longest prefix string common to strings $s1 and $s2.
# Returns: 
#   Returns the longest prefix string. 
#   If no non-trivial prefix exists then an empty string is returned.
sub common_prefix_pair {
    my ($s1, $s2) = @_;
    my ($len1, $len2) = map {length $_} ($s1, $s2);
    my $max_len = $len1 > $len2 ? $len1 : $len2;
    my $prefix = '';
    for my $i (0 ... $max_len - 1) {
        my ($sub1, $sub2) = map {substr $_, $i, 1} ($s1, $s2);
        if ($sub1 eq $sub2) {
            $prefix .= $sub1;
        }
        else {
            last;
        }
    }
    return $prefix;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-mkinfo
-- Create and nfo file for a rip, backed up by online databases.

=head1 VERSION

Version 0.0_1
Originally created on 10/10/10 17:43:36

=head1 USAGE

release-mkinfo [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Search for latest rip in online databases (currently only discogs) and 
create a release description (.nfo file).

This programs need more testing, or at least more options,
before it's included in the mkrelease workflow.

For now, it's performance can't be guaranteed but, I have gotten it working 
in all the test cases I have thought to choose for their special properties.

Let me know if it fails on a particular release. I will try to remedy the 
problem as quickly as possible.

=head1 BUGS

=over

=back

=head1 AUTHOR & COPYRIGHT 

©Bryan Matsuo (bryan.matsuo@gmail.com)

