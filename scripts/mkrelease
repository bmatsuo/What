#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob 'bsd_glob';
use Carp;
use LWP::Simple;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };

# Include private modules.
use What;
use What::Context;
use What::Utils;
use What::WhatRC;
use What::Release;
use What::Subsystem;
use What::Format;

our $VERSION = "0.0_9";

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $rip_dir = whatrc->rip_dir;
my $up_root = whatrc->upload_root;
my $illegal_chars = qr{([/?:])}xms;
my $subsystem = What::Subsystem->new(
    dryrun => $opt{'--dry-run'},
    verbose => $opt{'--verbose'},);


########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    # Create Info.txt, .nfo, and get cover art if necessary.
    $subsystem->exec(
            'release-mkinfo',
            ($opt{'--no-nfo'} ? '--no-nfo' : ()),
            '--skip-existing',
            ($opt{'--dont-set-context'} ? () : ('--set-context')),
        ) == 0 or die "Couldn't generate release information; $?\n";

    load_context();
    my $release = release();
    my ($artist, $year, $title) 
        = map {$release->{$_}} qw{artist year title};

    # Figure out the torrent formats requested and do book-keeping.
    # Create a list of lossy format arguments and their names.
    my @lossy_args                  
        = grep {$opt{$_}} (qw{--320 --v0 --v2 --aac --ogg});
    my @lossy_formats               
        = map {format_normalized($_)} (map {m/\A --(.*) \z/xms} @lossy_args);
    # Create a list of all format arguments and their names.
    my @format_args = @lossy_args;  
    my @torrent_formats = @lossy_formats;
    if ($opt{'--flac'}) { # Of course, append flac if it was given.
        unshift @format_args, '--flac' if $opt{'--flac'};
        unshift @torrent_formats, format_normalized('flac');
    }

    # Determine if the user wants any conversions, or any torrents at all.
    my $user_wants_a_conversion = scalar (@lossy_args);
    my $user_wants_a_format = scalar @format_args;
    if (!$user_wants_a_format && $opt{'--verbose'}) {
        print {\*STDERR} join q{ },
            "No formats selected to release (make torrents).",
            "FLAC will be moved into hierarchy with no torrents made.\n";
    }

    # Look for illegal characters in the artist name and release title.
    if ($artist =~ $illegal_chars) {
        print {\*STDERR} "Illegal character $1 in artist '$artist'.\n";
        $exitcode = 1;
    }
    if ($title =~ $illegal_chars) {
        print {\*STDERR} "Illegal character $1 in title '$title'.\n";
        $exitcode = 1;
    }

    my $flac_dir = $release->format_dir('FLAC');

    # Look for all the base level files.
    my @release_files = find_file_pattern('*', $rip_dir);

    # Look for existing playlists.
    my @existing_m3us = grep {$_ =~ m/\.m3u\z/xms} @release_files;
    my $root_has_m3u = @existing_m3us > 0;
    if (!$root_has_m3u && $opt{'--verbose'}) { 
        print "No M3U found at the root level\n";
    }

    # Look for file 'Info.txt', and remove it from the @release_files list.
    my $info_path = whatrc->rip_dir."/Info.txt";
    my $file_is_info = sub {$_[0] =~ m/Info\.txt\z/xms};
    my @info 
        = defined $opt{'--bandcamp'} ? ("") 
        : grep {$file_is_info->($_)} @release_files;
    #if (!@info) {
    #    print {\*STDERR} "Error: Can't find Info.txt.\n";
    #    exit(1);
    #}
    @release_files = grep {!$file_is_info->($_)} @release_files;

    # Check the release and make any necessary M3U files.
    if ( !$opt{'--bandcamp'} ) {
        # The release must be in the rip_dir. So check it.
        print {\*STDERR} "Checking release.\n";
        my @check_release = ('release-ok', 
            ($opt{'--verbose'} ? '--verbose' : ()),
            ($opt{'--no-cue'} ? '--no-cue' : ()),
            ($opt{'--no-log'} ? '--no-log' : ()), );
        $subsystem->exec(@check_release) == 0 or die;

        # Try to embed album art if desired.
        if (!$opt{'--no-art'}) {
            $subsystem->exec( 'release-embed-image' ) == 0 
                or die "Couldn't embed album art.\n";
        }

        # Create any necessary m3u files.
        print {\*STDERR} "Creating any necessary M3U playlists.\n";
        my @mkm3u = ('release-mkm3u' );
        $subsystem->exec(@mkm3u) == 0 or die "Problem making M3U files.";

        # Add any created M3U files to the set of release files.
        # (That is not very efficient).
        my @m3us = find_file_pattern("*.m3u", $rip_dir);
        push @release_files, @m3us if !$root_has_m3u;

        $subsystem->exec('release-organize') == 0
            or die "Problem organizing release.";
        @release_files = grep {
            !(basename($_) eq 'Info.txt')
        } ( find_file_pattern('*', $rip_dir) );
    }

    # Create the release directory structure.
    print {\*STDERR} "Creating upload hierarchy directories.\n";
    my @scaffold = ('release-scaffold',
        ($opt{'--verbose'} ? '--verbose' : ()),
        ($opt{'--dry-run'} ? '--dry-run' : (),));
    $subsystem->exec(@scaffold ) == 0 or die;

    if ($opt{'--bandcamp'}) {
        # MOVED ALL CODE TO bandcamp_release();
        print "Error: Bandcamp releasing is broken for now. "
            . "When I know it is reliable again, I will try it out again.\n";
    }
    else { # This is a rip, not bandcamp.
        # Move the FLAC release files, and Info.txt into place.
        print {\*STDERR} "Moving release into the upload hierarchy.\n";
        my @move_release = ('mv', @release_files, $flac_dir);
        $subsystem->exec(@move_release) == 0 or die;
        my @move_info 
        = ('mv', $info_path, $release->dir());
        $subsystem->exec(@move_info) == 0 or die;

        # Convert the FLAC into any other requested formats.
        if ($user_wants_a_conversion) {
            my @fargs = @lossy_args;
            my $pformat;
            my $should_delete_pformat = 0;
            print {\*STDERR} "Converting release to @lossy_formats.\n";
            my @convert = ('release-flac-convert', 
                (grep {not $_ eq '--flac'} @fargs),
                ($opt{'--verbose'} ? '--verbose' : ()),
                ($opt{'--dry-run'} ? '--dry-run' : ()),);
            $subsystem->exec(@convert) == 0 or die;
        }
    }

    # Create any requested torrents.
    if ($user_wants_a_format) {
        print {\*STDERR} "Create torrent file(s).\n";
        my @mktorrent = ('release-mktorrent', 
            (grep {$opt{$_}} qw{--flac --v0 --v2 --320 --ogg --aac}),
            ($opt{'--verbose'} ? '--verbose' : ()),
            ($opt{'--dry-run'} ? '--dry-run' : ()),
            ($opt{'--add-to-watch'} ? '--add-to-watch' : ()), );
        $subsystem->exec(@mktorrent ) == 0 or die;
        print {\*STDERR} 
            "Torrents are ready to be openned/uploaded at\n\n\t"
            . $release->dir() . "\n\n";
    }
    else {
        print {\*STDERR} "Release is ready.\n"
            , "Use release-flac-convert / release-mktorrent "
            , "to upload the release.\n"
            if $opt{'--verbose'};
    }

    # After torrents have been created (uploadable), 
    #   add the release to the users music library if desired.
    if ($opt{'--add-to-library'}) {
        print {\*STDERR} "Adding release to music library.\n";
        my @add_to_lib = ( 'release-add-to-library',);
        $subsystem->exec(@add_to_lib) == 0 or die;
    }

    if ($opt{'--remember-context'}) {
        print "The context has not been forgotten. ",
            "You can still run 'release-flac-convert' ",
            "and 'release-mktorrent' on the release.\n";
    }
    else {
        print "Forgetting context ..." if $opt{'--verbose'};
        rm_contexts();
        print "Done.\n" if $opt{'--verbose'};
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

sub bandcamp_release {
    my ($artist, $title, $release);
    my $artist_subdomain = lc $artist;
    # All I know now is that spaces turned to empty strings.
    $artist_subdomain =~ s/[^a-zA-Z0-9]+//gxms;
    my $album_url_path = lc $title;
    # All I know now is that spaces turned to dashes.
    $album_url_path =~ s/[^a-zA-Z0-9]+/-/gxms;
    $album_url_path =~ s/ -+ \z//xms;
    my $album_url 
    = join "/", "http://$artist_subdomain.bandcamp.com",
    "album", $album_url_path;
    my $album_html = get($album_url) 
        or die("Can't fetch $album_url."
        ." Please report this if it's a non-user error.");
    # Regexp to find the album id in html.
    my $album_id_p = qr{<!-- \s album \s id \s (\d+) \s -->}xms;
    if ($album_html =~ $album_id_p) {
        # Consturct a base url for requests
        my $album_id = $1;
        my $base_request_url 
        = join '/', 
        "http://popplers5.bandcamp.com", 
        "download", "album";

        # TODO: Create a request, download and unzip for each format.
        REQUESTFORMAT:
        for my $format (qw{flac 320 v0 v2}) {
            next REQUESTFORMAT if !defined $opt{"--$format"};
            print "Fetching $format... ";
            my $format_dir = $release->format_dir($format);
            my $format_zip = $format_dir.".zip";
            my $enc_format = $format eq 'flac' ? $format
            : "mp3-$format";
            my $request_arg_string 
            = "enc=$enc_format&id=$album_id";
            my $request = "$base_request_url?$request_arg_string";
            print $request, "\n";
            my @fetch = ('curl', $request, '-o', $format_zip);
            $subsystem->exec(@fetch) == 0 or die;
            if (not $format eq 'flac') { 
                # release-scaffold makes a FLAC dir.
                # Others need to be created now.
                my @mk_format_dir = ('mkdir', $format_dir);
                $subsystem->exec(@mk_format_dir) == 0 or die;
            }
            my @unzip_format 
            = ('unzip','-d', $format_dir, $format_zip);
            $subsystem->exec(@unzip_format) == 0 or die;
            my @rm_zip = ('rm', $format_zip);
            $subsystem->exec(@rm_zip) == 0 or die;
        }
    }
    else {
        die("Can't find album id.")
    }
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

mkrelease
-- Move a rip to the upload hierarchy and create desired formats/torrents.

=head1 VERSION

Version 0.0_7
Originally created on 08/03/10 22:02:39

=head1 USAGE

mkrelease [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --v0 | --V0

Create an MP3 V0 VBR torrent.

=item --v2 | --V2

Create an MP3 V2 VBR torrent.

=item --320

Create an MP3 320kbps CBR torrent.

=item --flac | --FLAC

Create a FLAC torrent.
FLAC files will be stored in the upload hierachy 
regardless of this option.

=item --ogg | --OGG | --q8

Create an OGG -q8.0 VBR torrent.

=item --aac | --AAC

Create an AAC ~256kbps ABR torrent.

=item --all

Create torrents for all possible formats and bitrates (not working yet).
Also not a recommended thing to do in general (no multi-threading yet).
ALSO, the free cross-platform AAC encoder FAAC kinda sucks.

=item --bandcamp

THIS OPTION IS BROKEN FOR THE TIME BEING!

Release is on bandcamp, and should be fetched.

=item --no-cue

Release the file regardless of whether or not it has a cue file.

=item --no-log

Release the file regardless of whether or not it has a cue file.

=item --no-nfo

Don't try to generate an info file.

=item --no-art

Don't try to embed album art.

=item -w | --add-to-watch

Add created torrents to the watch directory specified in '~/.whatrc'.

=item -L | --add-to-library

Add your preferred format to your music library.

=item -C | --dont-set-context

Don't let release-mkinfo set the release-context (this is used for testing).

=item -c | --remember-context

Don't forget the release context after finishing workflow.

=item --dry-run

Do not execute any system commands. This is mostly for debugging.
Used with the --verbose option, 
it can give a user a better idea of what will happen to their files.

=item --verbose

Print extra information about interior workings, 
and print system commands to stdout before executing them.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

This program coordinates several other programs. It does the following things.
    Checks the rip directory for a proper release (release-ok).
    Create any missing M3U playlists (release-mkm3u).
    Create a place in the upload directory for the release (release-scaffold).
    Move the release files into a newly created FLAC release directory.
    Convert the FLAC files to any desired format (release-flac-convert).
    Create torrent files for any desired formats (release-mktorrents).
Because of this, mkrelease accepts any options of the programs mentioned above. 
Some may be slightly altered for clarity

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

© The What team 2010

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
