#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use File::Glob 'bsd_glob';
use Carp;
use LWP::Simple;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What;
use What::Utils;
use What::WhatRC;
use What::Release;
use What::Subsystem;

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $illegal_chars = qr{([/?:])}xms;
my $whatrc = read_whatrc('~/.whatrc');

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $release = What::Release->new(
        artist => $opt{'--artist'},
        title => $opt{'--title'},
        year => $opt{'--year'},);

    my $user_wants_a_conversion
        = $opt{'--v0'} || $opt{'--v2'} || $opt{'--320'} 
        || $opt{'--ogg'} || $opt{'--aac'};

    my $user_wants_a_format 
        = $user_wants_a_conversion || $opt{'--flac'};

    if (!$user_wants_a_format) {
        print {\*STDERR} "No formats selected to release. ",
            "FLAC will be moved into hierarchy with no torrents made.\n";
    }

    my ($artist, $year, $title)
        = map {$opt{$_}} qw{--artist --year --title};

    if ($artist =~ $illegal_chars) {
        print {\*STDERR} 
            "Illegal character $1 in artist '$artist'.\n";
        $exitcode = 1;
    }

    if ($title =~ $illegal_chars) {
        print {\*STDERR} 
            "Illegal character $1 in title '$title'.\n";
        $exitcode = 1;
    }

    my $rip_dir = $whatrc->{rip_dir};

    my $up_root = $whatrc->{upload_root};

    my $flac_dir = $release->format_dir($up_root, 'FLAC');

    my @release_files = bsd_glob("$rip_dir/*");

    my $file_is_info = sub {$_[0] =~ m/Info\.txt\z/xms};

    my @info 
        = defined $opt{'--bandcamp'} ? ("") 
        : grep {$file_is_info->($_)} @release_files;

    if (!@info) {
        print {\*STDERR} "Can't find Info.txt.\n";
        exit(1);
    }

    @release_files = grep {!$file_is_info->($_)} @release_files;

    my $subsystem = What::Subsystem->new(
        dryrun => $opt{'--dry-run'},
        verbose => $opt{'--verbose'},);

    my @check_release = ('release-ok', 
        ($opt{'--verbose'} ? '--verbose' : ()));

    my @mkm3u = ('release-mkm3u', 
        '--artist', $opt{'--artist'},
        '--title', $opt{'--title'},
        '--year', $opt{'--year'},);

    my @scaffold = ('release-scaffold', 
        '--artist', $opt{'--artist'},
        '--title', $opt{'--title'},
        '--year', $opt{'--year'},
        ($opt{'--verbose'} ? '--verbose' : ()),
        ($opt{'--dry-run'} ? '--dry-run' : (),));

    my @move_release = ('mv', @release_files, $flac_dir);

    my @move_info 
        = ('mv', $info[0], $release->dir($up_root));

    my @convert = ('release-flac-convert', 
        '--artist', $opt{'--artist'},
        '--title', $opt{'--title'},
        '--year', $opt{'--year'},
        (grep {$opt{$_}} qw{--v0 --v2 --320 --ogg --aac}),
        ($opt{'--verbose'} ? '--verbose' : ()),
        ($opt{'--dry-run'} ? '--dry-run' : ()),);

    my @mktorrent = ('release-mktorrent', 
        '--artist', $opt{'--artist'},
        '--title', $opt{'--title'},
        '--year', $opt{'--year'},
        (grep {$opt{$_}} qw{--flac --v0 --v2 --320 --ogg --aac}),
        ($opt{'--verbose'} ? '--verbose' : ()),
        ($opt{'--dry-run'} ? '--dry-run' : ()));

    if (!$opt{'--bandcamp'}) {
        # The release must be in the rip_dir. So check it.
        $subsystem->exec(@check_release) == 0 or die;
        # Create any necessary m3u files.
        $subsystem->exec(@mkm3u) == 0 or die;
        my @m3us = find_file_pattern("*.m3u",$whatrc->{rip_dir});
        for my $m3u (@m3us) {
            push @release_files, $m3u 
                if grep {$_ eq $m3u} @release_files;
        }
    }

    # Create the release directory structure.
    $subsystem->exec(@scaffold ) == 0 or die;

    if ($opt{'--bandcamp'}) {
        my $artist_subdomain = lc $artist;
        # All I know now is that spaces turned to empty strings.
        $artist_subdomain =~ s/[^a-zA-Z0-9]+//gxms;
        my $album_url_path = lc $title;
        # All I know now is that spaces turned to dashes.
        $album_url_path =~ s/[^a-zA-Z0-9]+/-/gxms;
        $album_url_path =~ s/ -+ \z//xms;
        my $album_url 
            = join "/", "http://$artist_subdomain.bandcamp.com",
                "album", $album_url_path;
        my $album_html = get($album_url) 
            or die("Can't fetch $album_url."
                ." Please report this if it's a non-user error.");
        # Regexp to find the album id in html.
        my $album_id_p = qr{<!-- \s album \s id \s (\d+) \s -->}xms;
        if ($album_html =~ $album_id_p) {
            # Consturct a base url for requests
            my $album_id = $1;
            my $base_request_url 
                = join '/', 
                    "http://popplers5.bandcamp.com", 
                    "download", "album";

            # TODO: Create a request, download and unzip for each format.
            REQUESTFORMAT:
            for my $format (qw{flac 320 v0 v2}) {
                next REQUESTFORMAT if !defined $opt{"--$format"};
                print "Fetching $format... ";
                my $format_dir = $release->format_dir($up_root, $format);
                my $format_zip = $format_dir.".zip";
                my $enc_format = $format eq 'flac' ? $format
                    : "mp3-$format";
                my $request_arg_string 
                    = "enc=$enc_format&id=$album_id";
                my $request = "$base_request_url?$request_arg_string";
                print $request, "\n";
                my @fetch = ('curl', $request, '-o', $format_zip);
                $subsystem->exec(@fetch) == 0 or die;
                if (not $format eq 'flac') { 
                    # release-scaffold makes a FLAC dir.
                    # Others need to be created now.
                    my @mk_format_dir = ('mkdir', $format_dir);
                    $subsystem->exec(@mk_format_dir) == 0 or die;
                }
                my @unzip_format 
                    = ('unzip','-d', $format_dir, $format_zip);
                $subsystem->exec(@unzip_format) == 0 or die;
                my @rm_zip = ('rm', $format_zip);
                $subsystem->exec(@rm_zip) == 0 or die;
            }
        }
        else {
            die("Can't find album id.")
        }
    }
    else { # This is a rip, not bandcamp.
        $subsystem->exec(@move_release) == 0 or die;
        $subsystem->exec(@move_info) == 0 or die;
        if ($user_wants_a_conversion) {
            $subsystem->exec(@convert) == 0 or die;
        }
    }
    if ($user_wants_a_format) {
        $subsystem->exec(@mktorrent ) == 0 or die;
    }
    else {
        print {\*STDERR} "Release is ready.\n",
            "Use release-flac-convert / release-mktorrent ",
            "to upload the release.\n";
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################


# Finally, kickstart the script
main();

__END__

=head1 NAME

mkrelease
-- short description

=head1 VERSION

Version 0.0_1
Originally created on 08/03/10 22:02:39

=head1 USAGE

mkrelease [options]

=head1 REQUIRED ARGUMENTS

=over

=item --artist <artist>

Release artist.

=item --title <title>

Release title.

=item --year <year>

Release year.

=for Euclid:
    year.type: /\d{4}/

=back

=head1 OPTIONS

=over

=item --v0 | --V0

=item --v2 | --V2

=item --320

=item --flac | --FLAC

=item --ogg | --q8

=item --aac

=item --num-discs <num_discs>

=for Euclid:
    num_discs.type: +integer

=item --bandcamp

Release is on bandcamp, and should be fetched.

=item --dry-run

=item --verbose

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
