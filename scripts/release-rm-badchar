#!/usr/bin/env perl

# THIS SCRIPT IS IN ALPHA. DO NOT USE IT WITHOUT CAUTION.

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::WhatRC;
use What::Utils qw{:files :dirs};
use What::Subsystem;


########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

my $subsystem = What::Subsystem->new();

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    my $release_dir = whatrc->rip_dir;

    # Sort files by decreasing directory depth.
    my @files = find_hierarchy();
    my %depth;
    for (@files) {$depth{$_} = scalar(@{[$a =~ m!/!g]}) + 1};
    @files = sort { $depth{$a} <=> $depth{$a} } find_hierarchy();

    for my $path (@files) {
        my $ext;
        if ($ext =~ /[^/] \.(\w+) \z/xms) {
            $ext = $1;
        }
        if ($ext eq 'm3u') {
            fix_m3u($path);
        }
        elsif ($ext eq 'cue') {
            fix_cue($path);
        }
        fix_file($path);
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

sub fix_file {
    my $path = shift;
    my $fixed = join '/', dirname($path), replace_bad_chars(basename($path));
    return 0 if ($fixed eq $path);
    croak("Destination file exists. $fixed ") if -e  $fixed;
    $subsystem->exec('mv', $path, $fixed) == 0
        or croak("Couldn't move '$path' to '$fixed'.\n");
    return 1;
}

sub fix_m3u {
    my $m3u_path = shift;
    my $m3u;
    open $m3u, "<", $m3u_path
        or croak("Couldn't open $m3u_path");
    my @m3u = <$m3u>;
    close $m3u;
    my $num_replaced = 0;

    for (@m3u) {
        next if $_ !~ m/\A [^#]/xms;
        my $path = $_;
        chomp $path;
        $path = join '/', (map {replace_bad_chars($_)} split ('/', $path));
        $_ = "$path\n";
    }

    open $m3u, ">", $m3u_path
        or croak("Couldn't open $m3u_path");
    print {$m3u} @m3u;
    close $m3u;
}

sub fix_cue {
    my $cue_path = shift;

    open my $cue, "<", $cue_path
        or croak("Couldn't open $cue_path");
    my @cue = <$cue>;
    close $cue;

    my $num_replaced = 0;

    for (@cue) { 
        next if 
            $_ !~ 
                /\A 
                \s* FILE \s+ " ( [^"] | \\" )* .wav" \s+ WAVE \s* \n? 
                \z/xms;
        my $path = $1;
        $path = join '/', (map {replace_bad_chars($_)} split ('/', $path));
        $_ = qq{FILE "$path.wav" WAVE \n};
        ++$num_replaced;
    }

    open $cue, ">", $cue_path;
    print {$cue} @cue;
    close $cue;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

release-rm-badchar
-- Try to remove bad characters from release filenames (broken).

=head1 VERSION

Version 0.0_1
Originally created on 08/10/10 00:14:05

=head1 USAGE

release-rm-badchar [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

This does not work, is not called by any other program, and should
not be called by the user.

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

Â©Bryan Matsuo (bryan.matsuo@gmail.com)

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
