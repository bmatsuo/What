#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

########################################################################
# MODULES
########################################################################

# Include core modules.
use strict;
use warnings;
use File::Basename;
use Carp;

# Include CPAN modules.
use Getopt::Euclid qw{ :vars<opt_> };
use Readonly;

# Include private modules.
use What::WhatRC;
use What::Release;
use What::Subsystem;

our $VERSION = '0.0_1';

########################################################################
# GENERAL GLOBAL VARIABLES
########################################################################

# Basic program information.
Readonly my $prog_incantation  => $0;
Readonly my $prog_dir          => dirname($0);
Readonly my $prog_name         => basename($0);

# Command-line option hash.
my %opt = %ARGV;

# Global program exitcode.
my $exitcode = 0;

########################################################################
# PROGRAM SPECIFIC GLOBALS
########################################################################

########################################################################
# MAIN FUNCTION
########################################################################

# main() - main program execution 
sub main{
    load_context();
    my ($artist, $year, $title) 
        = map {context->{$_}} qw{artist year title};
    my $num_discs = $opt{"--num-discs"};

    my $release = What::Release->new(
        artist => context->artist,
        title => context->title,
        year => context->year,
        discs => $opt{'--num-discs'});

    my $rip_root = whatrc->upload_root;

    my $artist_path = $release->artist_dir();
    my $root_path = $release->dir();
    my $flac_dir_path = $release->format_dir('flac');
    my $subsystem = What::Subsystem->new();

    my @mkartist = ('mkdir', $artist_path);
    my @mkroot = ('mkdir', $root_path);
    my @mkflac = ('mkdir', $flac_dir_path);

    # Don't check exit code because failure is tolerable
    $subsystem->exec(@mkartist) == 0
        or croak("Couldn't make artist directory $artist_path")
            if !-d $artist_path;

    $subsystem->exec(@mkroot) == 0
        or croak("Couldn't make root directory $root_path");

    $subsystem->exec(@mkflac) == 0
        or croak("Couldn't make FLAC directory $flac_dir_path");

    if ($num_discs > 1) {
        for my $disc (1 .. $num_discs) {
            my $disc_dir = "$flac_dir_path/CD$disc";
            my @mkdisc = ('mkdir', $disc_dir);
            $subsystem->exec(@mkdisc) == 0
                or croak("Couldn't make CD$disc directory.");
        }
    }

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

# Finally, kickstart the script
main();

__END__

=head1 NAME

album-scaffold
-- Create a release directory in the upload hierarchy.

=head1 VERSION

Version 0.0_1
Originally created on 07/07/10 23:48:39

=head1 USAGE

album-scaffold [options]

=head1 REQUIRED ARGUMENTS

=over

=back

=head1 OPTIONS

=over

=item --artist [=] <artist>

Release artist

for Euclid:
    artist.type: string, length artist

=item --title [=] <title>

Release name

for Euclid:
    title.type: string, length title

=item --year [=] <year>

Release year

=for Euclid:
    year.type: /\d{4}/

=item --num-discs [=] <discs>

Number of discs in release.

=for Euclid:
    discs.type: +integer
    discs.default: 1

=item --dry-run

Don't actually make changes to the filesystem. 
Just print the steps being taken by album-scaffold.

=item --verbose

Print out the steps being taken by album-scaffold before they are
executed.

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

Create a place in the upload hierarchy for a specified release.

If the release directory exists already, release-scaffold fails
with a non-zero exitcode.

=head1 BUGS

=over

=back

=head1 COPYRIGHT & LICENSE

Â© The What team.

This file is part of What.

What is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

What is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with What.  If not, see <http://www.gnu.org/licenses/>.

=cut
